//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SdAsm.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SdAsmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, Dot=7, LeftParen=8, RightParen=9, 
		LeftBracket=10, RightBracket=11, Less=12, LessEqual=13, Greater=14, GreaterEqual=15, 
		Equal=16, NotEqual=17, Minus=18, Plus=19, Star=20, Div=21, Mod=22, AndAnd=23, 
		OrOr=24, Not=25, LeftShift=26, RightShift=27, And=28, Or=29, Caret=30, 
		Tilde=31, Assign=32, PlusAssign=33, MinusAssign=34, StarAssign=35, DivAssign=36, 
		ModAssign=37, LeftShiftAssign=38, RightShiftAssign=39, AndAssign=40, OrAssign=41, 
		XorAssign=42, TildeAssign=43, ORG=44, Question=45, SingleQuote=46, Quote=47, 
		Colon=48, Comma=49, Pound=50, AT=51, CRLF=52, SegmentType=53, DataType=54, 
		Number=55, Identifier=56, StringLiteral=57, WS=58, COMMENT=59;
	public const int
		RULE_asmFile = 0, RULE_codeLine = 1, RULE_segment = 2, RULE_segmentSpec = 3, 
		RULE_bootAddr = 4, RULE_memoryAlloc = 5, RULE_memoryData = 6, RULE_ifStatement = 7, 
		RULE_label = 8, RULE_statement = 9, RULE_instruction = 10, RULE_assignmentExpr = 11, 
		RULE_expressions = 12, RULE_expr = 13, RULE_operand = 14, RULE_operator = 15, 
		RULE_arithmeticOperator = 16, RULE_unaryOperator = 17, RULE_assignmentOperator = 18, 
		RULE_bitOperator = 19, RULE_compareOperator = 20, RULE_logicalOperator = 21, 
		RULE_normalLabel = 22, RULE_inlineLabel = 23;
	public static readonly string[] ruleNames = {
		"asmFile", "codeLine", "segment", "segmentSpec", "bootAddr", "memoryAlloc", 
		"memoryData", "ifStatement", "label", "statement", "instruction", "assignmentExpr", 
		"expressions", "expr", "operand", "operator", "arithmeticOperator", "unaryOperator", 
		"assignmentOperator", "bitOperator", "compareOperator", "logicalOperator", 
		"normalLabel", "inlineLabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'.if'", "'.else'", "'.endif'", "'\\'", "'=:'", "'.'", "'('", 
		"')'", "'['", "']'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'-'", 
		"'+'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'<<'", "'>>'", "'&'", 
		"'|'", "'^'", "'~'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", 
		"'>>='", "'&='", "'|='", "'^='", "'~='", "'org'", "'?'", "'''", "'\"'", 
		"':'", "','", "'#'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "Dot", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"Equal", "NotEqual", "Minus", "Plus", "Star", "Div", "Mod", "AndAnd", 
		"OrOr", "Not", "LeftShift", "RightShift", "And", "Or", "Caret", "Tilde", 
		"Assign", "PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
		"LeftShiftAssign", "RightShiftAssign", "AndAssign", "OrAssign", "XorAssign", 
		"TildeAssign", "ORG", "Question", "SingleQuote", "Quote", "Colon", "Comma", 
		"Pound", "AT", "CRLF", "SegmentType", "DataType", "Number", "Identifier", 
		"StringLiteral", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SdAsm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SdAsmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SdAsmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SdAsmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AsmFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SdAsmParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CRLF() { return GetTokens(SdAsmParser.CRLF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRLF(int i) {
			return GetToken(SdAsmParser.CRLF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public AsmFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAsmFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAsmFile(this);
		}
	}

	[RuleVersion(0)]
	public AsmFileContext asmFile() {
		AsmFileContext _localctx = new AsmFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_asmFile);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CRLF) {
					{
					{
					State = 48;
					Match(CRLF);
					}
					}
					State = 53;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << Dot) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0)) {
					{
					{
					State = 54;
					codeLine();
					State = 56;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 55;
						Match(CRLF);
						}
						}
						State = 58;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CRLF );
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				codeLine();
				State = 67;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BootAddrContext bootAddr() {
			return GetRuleContext<BootAddrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryAllocContext memoryAlloc() {
			return GetRuleContext<MemoryAllocContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CodeLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterCodeLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitCodeLine(this);
		}
	}

	[RuleVersion(0)]
	public CodeLineContext codeLine() {
		CodeLineContext _localctx = new CodeLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_codeLine);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				segment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				bootAddr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				memoryAlloc();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76;
				label();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 77;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SegmentType() { return GetToken(SdAsmParser.SegmentType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SegmentSpecContext segmentSpec() {
			return GetRuleContext<SegmentSpecContext>(0);
		}
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(Dot);
			State = 81;
			Match(SegmentType);
			State = 82;
			segmentSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SdAsmParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SdAsmParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(SdAsmParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(SdAsmParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(SdAsmParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(SdAsmParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(SdAsmParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(SdAsmParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentSpecContext[] segmentSpec() {
			return GetRuleContexts<SegmentSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentSpecContext segmentSpec(int i) {
			return GetRuleContext<SegmentSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public SegmentSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegmentSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegmentSpec(this);
		}
	}

	[RuleVersion(0)]
	public SegmentSpecContext segmentSpec() {
		SegmentSpecContext _localctx = new SegmentSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_segmentSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Minus) {
				{
				{
				State = 84;
				Match(Minus);
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 90;
			Match(Identifier);
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 109;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Minus:
					case Identifier:
						{
						State = 94;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Minus) {
							{
							{
							State = 91;
							Match(Minus);
							}
							}
							State = 96;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 97;
						Match(Identifier);
						}
						break;
					case LeftParen:
						{
						State = 98;
						Match(LeftParen);
						State = 103;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 99;
							segmentSpec();
							State = 101;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Comma) {
								{
								State = 100;
								Match(Comma);
								}
							}

							}
							}
							State = 105;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==Minus || _la==Identifier );
						State = 107;
						Match(RightParen);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BootAddrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORG() { return GetToken(SdAsmParser.ORG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public BootAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bootAddr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterBootAddr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitBootAddr(this);
		}
	}

	[RuleVersion(0)]
	public BootAddrContext bootAddr() {
		BootAddrContext _localctx = new BootAddrContext(Context, State);
		EnterRule(_localctx, 8, RULE_bootAddr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(Dot);
			State = 115;
			Match(ORG);
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 116;
				Match(Number);
				}
				break;
			case 2:
				{
				State = 117;
				expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryAllocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DataType() { return GetToken(SdAsmParser.DataType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDataContext[] memoryData() {
			return GetRuleContexts<MemoryDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDataContext memoryData(int i) {
			return GetRuleContext<MemoryDataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public MemoryAllocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryAlloc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterMemoryAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitMemoryAlloc(this);
		}
	}

	[RuleVersion(0)]
	public MemoryAllocContext memoryAlloc() {
		MemoryAllocContext _localctx = new MemoryAllocContext(Context, State);
		EnterRule(_localctx, 10, RULE_memoryAlloc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(Dot);
			State = 121;
			Match(DataType);
			State = 122;
			memoryData();
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 123;
				Match(Comma);
				State = 124;
				memoryData();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SdAsmParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		public MemoryDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterMemoryData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitMemoryData(this);
		}
	}

	[RuleVersion(0)]
	public MemoryDataContext memoryData() {
		MemoryDataContext _localctx = new MemoryDataContext(Context, State);
		EnterRule(_localctx, 12, RULE_memoryData);
		int _la;
		try {
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				Match(Number);
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 131;
					Match(T__0);
					}
				}

				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(StringLiteral);
				}
				break;
			case LeftParen:
			case Pound:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pound) {
					{
					State = 135;
					Match(Pound);
					}
				}

				State = 138;
				Match(LeftParen);
				State = 139;
				expr(0);
				State = 140;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdAsmParser.Not, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(T__1);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Not) {
					{
					State = 145;
					Match(Not);
					}
				}

				State = 148;
				Match(Identifier);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149;
				Match(T__2);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalLabelContext normalLabel() {
			return GetRuleContext<NormalLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineLabelContext inlineLabel() {
			return GetRuleContext<InlineLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(SdAsmParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(SdAsmParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine() {
			return GetRuleContext<CodeLineContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 16, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dot:
			case Identifier:
				{
				State = 153;
				normalLabel();
				}
				break;
			case Number:
				{
				State = 154;
				inlineLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 157;
				Match(Colon);
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Colon );
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << Dot) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0)) {
				{
				State = 162;
				codeLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_statement);
		int _la;
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				assignmentExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				instruction();
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << Dot) | (1L << LeftParen) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << AndAnd) | (1L << OrOr) | (1L << Not) | (1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde) | (1L << Assign) | (1L << SingleQuote) | (1L << Quote) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0)) {
					{
					State = 167;
					expressions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 20, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAssignmentExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAssignmentExpr(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExprContext assignmentExpr() {
		AssignmentExprContext _localctx = new AssignmentExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignmentExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			operand();
			State = 175;
			assignmentOperator();
			State = 176;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 24, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			expr(0);
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 179;
				Match(Comma);
				State = 180;
				expr(0);
				}
				}
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 187;
				@operator();
				State = 188;
				operand();
				}
				break;
			case 2:
				{
				State = 190;
				operand();
				State = 191;
				Match(Dot);
				State = 192;
				Match(Number);
				}
				break;
			case 3:
				{
				State = 194;
				operand();
				}
				break;
			case 4:
				{
				State = 201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Pound:
					{
					State = 195;
					Match(Pound);
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << Less) | (1L << Greater) | (1L << SingleQuote) | (1L << Quote))) != 0)) {
						{
						State = 196;
						unaryOperator();
						}
					}

					}
					break;
				case T__4:
				case Less:
				case Greater:
				case SingleQuote:
				case Quote:
					{
					State = 199;
					unaryOperator();
					}
					break;
				case Number:
					{
					State = 200;
					Match(Number);
					}
					break;
				case LeftParen:
					break;
				default:
					break;
				}
				State = 203;
				Match(LeftParen);
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 204;
					expressions();
					}
					}
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << Dot) | (1L << LeftParen) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << AndAnd) | (1L << OrOr) | (1L << Not) | (1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde) | (1L << Assign) | (1L << SingleQuote) | (1L << Quote) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0) );
				State = 209;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 213;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 214;
					@operator();
					State = 215;
					expr(6);
					}
					} 
				}
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NormalLabelContext normalLabel() {
			return GetRuleContext<NormalLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineLabelContext inlineLabel() {
			return GetRuleContext<InlineLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SdAsmParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 28, RULE_operand);
		int _la;
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				Match(Number);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pound) {
					{
					State = 223;
					Match(Pound);
					}
				}

				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 226;
					Match(AT);
					}
				}

				State = 231;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Dot:
				case Identifier:
					{
					State = 229;
					normalLabel();
					}
					break;
				case Number:
					{
					State = 230;
					inlineLabel();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				Match(Dot);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperatorContext arithmeticOperator() {
			return GetRuleContext<ArithmeticOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_operator);
		try {
			State = 242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				arithmeticOperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				unaryOperator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				bitOperator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239;
				compareOperator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 240;
				logicalOperator();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241;
				assignmentOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(SdAsmParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(SdAsmParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(SdAsmParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(SdAsmParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(SdAsmParser.Mod, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterArithmeticOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitArithmeticOperator(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperatorContext arithmeticOperator() {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(Context, State);
		EnterRule(_localctx, 32, RULE_arithmeticOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(SdAsmParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(SdAsmParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleQuote() { return GetToken(SdAsmParser.SingleQuote, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quote() { return GetToken(SdAsmParser.Quote, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << Less) | (1L << Greater) | (1L << SingleQuote) | (1L << Quote))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdAsmParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SdAsmParser.Equal, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << Equal) | (1L << Assign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(SdAsmParser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift() { return GetToken(SdAsmParser.RightShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SdAsmParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SdAsmParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(SdAsmParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(SdAsmParser.Caret, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_bitOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SdAsmParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(SdAsmParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(SdAsmParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(SdAsmParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(SdAsmParser.LessEqual, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << NotEqual))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(SdAsmParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(SdAsmParser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdAsmParser.Not, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AndAnd) | (1L << OrOr) | (1L << Not))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		public NormalLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterNormalLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitNormalLabel(this);
		}
	}

	[RuleVersion(0)]
	public NormalLabelContext normalLabel() {
		NormalLabelContext _localctx = new NormalLabelContext(Context, State);
		EnterRule(_localctx, 44, RULE_normalLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dot) {
				{
				State = 256;
				Match(Dot);
				}
			}

			State = 259;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		public InlineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterInlineLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitInlineLabel(this);
		}
	}

	[RuleVersion(0)]
	public InlineLabelContext inlineLabel() {
		InlineLabelContext _localctx = new InlineLabelContext(Context, State);
		EnterRule(_localctx, 46, RULE_inlineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			Match(Number);
			State = 262;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,59,265,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,5,0,50,8,0,10,0,12,0,53,9,0,1,0,1,0,4,0,57,8,0,
		11,0,12,0,58,5,0,61,8,0,10,0,12,0,64,9,0,1,0,1,0,1,0,1,0,1,0,3,0,71,8,
		0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,79,8,1,1,2,1,2,1,2,1,2,1,3,5,3,86,8,3,10,
		3,12,3,89,9,3,1,3,1,3,5,3,93,8,3,10,3,12,3,96,9,3,1,3,1,3,1,3,1,3,3,3,
		102,8,3,4,3,104,8,3,11,3,12,3,105,1,3,1,3,5,3,110,8,3,10,3,12,3,113,9,
		3,1,4,1,4,1,4,1,4,3,4,119,8,4,1,5,1,5,1,5,1,5,1,5,5,5,126,8,5,10,5,12,
		5,129,9,5,1,6,1,6,3,6,133,8,6,1,6,1,6,3,6,137,8,6,1,6,1,6,1,6,1,6,3,6,
		143,8,6,1,7,1,7,3,7,147,8,7,1,7,1,7,1,7,3,7,152,8,7,1,8,1,8,3,8,156,8,
		8,1,8,4,8,159,8,8,11,8,12,8,160,1,8,3,8,164,8,8,1,9,1,9,1,9,3,9,169,8,
		9,3,9,171,8,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,182,8,
		12,10,12,12,12,185,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,3,13,198,8,13,1,13,1,13,3,13,202,8,13,1,13,1,13,4,13,206,8,13,
		11,13,12,13,207,1,13,1,13,3,13,212,8,13,1,13,1,13,1,13,1,13,5,13,218,8,
		13,10,13,12,13,221,9,13,1,14,1,14,3,14,225,8,14,1,14,3,14,228,8,14,1,14,
		1,14,3,14,232,8,14,1,14,3,14,235,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,
		15,243,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,3,22,258,8,22,1,22,1,22,1,23,1,23,1,23,1,23,0,1,26,24,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,0,6,1,0,18,22,4,
		0,5,5,12,12,14,14,46,47,3,0,6,6,16,16,32,32,1,0,26,31,2,0,12,15,17,17,
		1,0,23,25,291,0,70,1,0,0,0,2,78,1,0,0,0,4,80,1,0,0,0,6,87,1,0,0,0,8,114,
		1,0,0,0,10,120,1,0,0,0,12,142,1,0,0,0,14,151,1,0,0,0,16,155,1,0,0,0,18,
		170,1,0,0,0,20,172,1,0,0,0,22,174,1,0,0,0,24,178,1,0,0,0,26,211,1,0,0,
		0,28,234,1,0,0,0,30,242,1,0,0,0,32,244,1,0,0,0,34,246,1,0,0,0,36,248,1,
		0,0,0,38,250,1,0,0,0,40,252,1,0,0,0,42,254,1,0,0,0,44,257,1,0,0,0,46,261,
		1,0,0,0,48,50,5,52,0,0,49,48,1,0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,
		1,0,0,0,52,62,1,0,0,0,53,51,1,0,0,0,54,56,3,2,1,0,55,57,5,52,0,0,56,55,
		1,0,0,0,57,58,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,60,54,
		1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,
		1,0,0,0,65,71,5,0,0,1,66,67,3,2,1,0,67,68,5,0,0,1,68,71,1,0,0,0,69,71,
		5,0,0,1,70,51,1,0,0,0,70,66,1,0,0,0,70,69,1,0,0,0,71,1,1,0,0,0,72,79,3,
		4,2,0,73,79,3,8,4,0,74,79,3,10,5,0,75,79,3,14,7,0,76,79,3,16,8,0,77,79,
		3,18,9,0,78,72,1,0,0,0,78,73,1,0,0,0,78,74,1,0,0,0,78,75,1,0,0,0,78,76,
		1,0,0,0,78,77,1,0,0,0,79,3,1,0,0,0,80,81,5,7,0,0,81,82,5,53,0,0,82,83,
		3,6,3,0,83,5,1,0,0,0,84,86,5,18,0,0,85,84,1,0,0,0,86,89,1,0,0,0,87,85,
		1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,0,90,111,5,56,0,0,91,93,
		5,18,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,
		1,0,0,0,96,94,1,0,0,0,97,110,5,56,0,0,98,103,5,8,0,0,99,101,3,6,3,0,100,
		102,5,49,0,0,101,100,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,99,1,
		0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,107,1,0,0,0,
		107,108,5,9,0,0,108,110,1,0,0,0,109,94,1,0,0,0,109,98,1,0,0,0,110,113,
		1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,7,1,0,0,0,113,111,1,0,0,0,
		114,115,5,7,0,0,115,118,5,44,0,0,116,119,5,55,0,0,117,119,3,24,12,0,118,
		116,1,0,0,0,118,117,1,0,0,0,119,9,1,0,0,0,120,121,5,7,0,0,121,122,5,54,
		0,0,122,127,3,12,6,0,123,124,5,49,0,0,124,126,3,12,6,0,125,123,1,0,0,0,
		126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,11,1,0,0,0,129,127,
		1,0,0,0,130,132,5,55,0,0,131,133,5,1,0,0,132,131,1,0,0,0,132,133,1,0,0,
		0,133,143,1,0,0,0,134,143,5,57,0,0,135,137,5,50,0,0,136,135,1,0,0,0,136,
		137,1,0,0,0,137,138,1,0,0,0,138,139,5,8,0,0,139,140,3,26,13,0,140,141,
		5,9,0,0,141,143,1,0,0,0,142,130,1,0,0,0,142,134,1,0,0,0,142,136,1,0,0,
		0,143,13,1,0,0,0,144,146,5,2,0,0,145,147,5,25,0,0,146,145,1,0,0,0,146,
		147,1,0,0,0,147,148,1,0,0,0,148,152,5,56,0,0,149,152,5,3,0,0,150,152,5,
		4,0,0,151,144,1,0,0,0,151,149,1,0,0,0,151,150,1,0,0,0,152,15,1,0,0,0,153,
		156,3,44,22,0,154,156,3,46,23,0,155,153,1,0,0,0,155,154,1,0,0,0,156,158,
		1,0,0,0,157,159,5,48,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,
		0,160,161,1,0,0,0,161,163,1,0,0,0,162,164,3,2,1,0,163,162,1,0,0,0,163,
		164,1,0,0,0,164,17,1,0,0,0,165,171,3,22,11,0,166,168,3,20,10,0,167,169,
		3,24,12,0,168,167,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,165,1,0,
		0,0,170,166,1,0,0,0,171,19,1,0,0,0,172,173,5,56,0,0,173,21,1,0,0,0,174,
		175,3,28,14,0,175,176,3,36,18,0,176,177,3,26,13,0,177,23,1,0,0,0,178,183,
		3,26,13,0,179,180,5,49,0,0,180,182,3,26,13,0,181,179,1,0,0,0,182,185,1,
		0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,25,1,0,0,0,185,183,1,0,0,0,186,
		187,6,13,-1,0,187,188,3,30,15,0,188,189,3,28,14,0,189,212,1,0,0,0,190,
		191,3,28,14,0,191,192,5,7,0,0,192,193,5,55,0,0,193,212,1,0,0,0,194,212,
		3,28,14,0,195,197,5,50,0,0,196,198,3,34,17,0,197,196,1,0,0,0,197,198,1,
		0,0,0,198,202,1,0,0,0,199,202,3,34,17,0,200,202,5,55,0,0,201,195,1,0,0,
		0,201,199,1,0,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,
		205,5,8,0,0,204,206,3,24,12,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,
		1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,210,5,9,0,0,210,212,1,0,0,
		0,211,186,1,0,0,0,211,190,1,0,0,0,211,194,1,0,0,0,211,201,1,0,0,0,212,
		219,1,0,0,0,213,214,10,5,0,0,214,215,3,30,15,0,215,216,3,26,13,6,216,218,
		1,0,0,0,217,213,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,
		0,220,27,1,0,0,0,221,219,1,0,0,0,222,235,5,55,0,0,223,225,5,50,0,0,224,
		223,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,228,5,51,0,0,227,226,1,
		0,0,0,227,228,1,0,0,0,228,231,1,0,0,0,229,232,3,44,22,0,230,232,3,46,23,
		0,231,229,1,0,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,235,5,7,0,0,234,
		222,1,0,0,0,234,224,1,0,0,0,234,233,1,0,0,0,235,29,1,0,0,0,236,243,3,32,
		16,0,237,243,3,34,17,0,238,243,3,38,19,0,239,243,3,40,20,0,240,243,3,42,
		21,0,241,243,3,36,18,0,242,236,1,0,0,0,242,237,1,0,0,0,242,238,1,0,0,0,
		242,239,1,0,0,0,242,240,1,0,0,0,242,241,1,0,0,0,243,31,1,0,0,0,244,245,
		7,0,0,0,245,33,1,0,0,0,246,247,7,1,0,0,247,35,1,0,0,0,248,249,7,2,0,0,
		249,37,1,0,0,0,250,251,7,3,0,0,251,39,1,0,0,0,252,253,7,4,0,0,253,41,1,
		0,0,0,254,255,7,5,0,0,255,43,1,0,0,0,256,258,5,7,0,0,257,256,1,0,0,0,257,
		258,1,0,0,0,258,259,1,0,0,0,259,260,5,56,0,0,260,45,1,0,0,0,261,262,5,
		55,0,0,262,263,5,1,0,0,263,47,1,0,0,0,35,51,58,62,70,78,87,94,101,105,
		109,111,118,127,132,136,142,146,151,155,160,163,168,170,183,197,201,207,
		211,219,224,227,231,234,242,257
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
