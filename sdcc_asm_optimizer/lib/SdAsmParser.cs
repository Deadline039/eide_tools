//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SdAsm.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SdAsmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, Dot=14, LeftParen=15, RightParen=16, 
		LeftBracket=17, RightBracket=18, Less=19, LessEqual=20, Greater=21, GreaterEqual=22, 
		Equal=23, NotEqual=24, Minus=25, Plus=26, Star=27, Div=28, Mod=29, AndAnd=30, 
		OrOr=31, Not=32, LeftShift=33, RightShift=34, And=35, Or=36, Caret=37, 
		Tilde=38, Assign=39, PlusAssign=40, MinusAssign=41, StarAssign=42, DivAssign=43, 
		ModAssign=44, LeftShiftAssign=45, RightShiftAssign=46, AndAssign=47, OrAssign=48, 
		XorAssign=49, TildeAssign=50, ORG=51, Question=52, SingleQuote=53, Quote=54, 
		Colon=55, Comma=56, Pound=57, AT=58, CRLF=59, SegmentType=60, DataType=61, 
		Number=62, Identifier=63, StringLiteral=64, WS=65, COMMENT=66;
	public const int
		RULE_asmFile = 0, RULE_codeLine = 1, RULE_directive = 2, RULE_moduleName = 3, 
		RULE_sdccOpts = 4, RULE_segment = 5, RULE_segmentName = 6, RULE_segmentOpts = 7, 
		RULE_bootAddr = 8, RULE_memoryAlloc = 9, RULE_memoryData = 10, RULE_ifStatement = 11, 
		RULE_label = 12, RULE_statement = 13, RULE_absAddrAllocExpr = 14, RULE_instruction = 15, 
		RULE_expressions = 16, RULE_expr = 17, RULE_operand = 18, RULE_operator = 19, 
		RULE_arithmeticOperator = 20, RULE_unaryOperator = 21, RULE_assignmentOperator = 22, 
		RULE_bitOperator = 23, RULE_compareOperator = 24, RULE_logicalOperator = 25, 
		RULE_normalLabel = 26, RULE_inlineLabel = 27;
	public static readonly string[] ruleNames = {
		"asmFile", "codeLine", "directive", "moduleName", "sdccOpts", "segment", 
		"segmentName", "segmentOpts", "bootAddr", "memoryAlloc", "memoryData", 
		"ifStatement", "label", "statement", "absAddrAllocExpr", "instruction", 
		"expressions", "expr", "operand", "operator", "arithmeticOperator", "unaryOperator", 
		"assignmentOperator", "bitOperator", "compareOperator", "logicalOperator", 
		"normalLabel", "inlineLabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'16bit'", "'24bit'", "'32bit'", "'module'", "'optsdcc'", "'local'", 
		"'$'", "'.if'", "'.ifdef'", "'.else'", "'.endif'", "'\\'", "'=:'", "'.'", 
		"'('", "')'", "'['", "']'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'-'", "'+'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'<<'", "'>>'", 
		"'&'", "'|'", "'^'", "'~'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'<<='", "'>>='", "'&='", "'|='", "'^='", "'~='", "'org'", "'?'", "'''", 
		"'\"'", "':'", "','", "'#'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Dot", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "Equal", "NotEqual", "Minus", 
		"Plus", "Star", "Div", "Mod", "AndAnd", "OrOr", "Not", "LeftShift", "RightShift", 
		"And", "Or", "Caret", "Tilde", "Assign", "PlusAssign", "MinusAssign", 
		"StarAssign", "DivAssign", "ModAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "OrAssign", "XorAssign", "TildeAssign", "ORG", "Question", 
		"SingleQuote", "Quote", "Colon", "Comma", "Pound", "AT", "CRLF", "SegmentType", 
		"DataType", "Number", "Identifier", "StringLiteral", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SdAsm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SdAsmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SdAsmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SdAsmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AsmFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SdAsmParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CRLF() { return GetTokens(SdAsmParser.CRLF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRLF(int i) {
			return GetToken(SdAsmParser.CRLF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public AsmFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAsmFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAsmFile(this);
		}
	}

	[RuleVersion(0)]
	public AsmFileContext asmFile() {
		AsmFileContext _localctx = new AsmFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_asmFile);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CRLF) {
					{
					{
					State = 56;
					Match(CRLF);
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Dot) | (1L << Number) | (1L << Identifier))) != 0)) {
					{
					{
					State = 62;
					codeLine();
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 63;
						Match(CRLF);
						}
						}
						State = 66;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CRLF );
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 73;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				codeLine();
				State = 75;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BootAddrContext bootAddr() {
			return GetRuleContext<BootAddrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryAllocContext memoryAlloc() {
			return GetRuleContext<MemoryAllocContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CodeLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterCodeLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitCodeLine(this);
		}
	}

	[RuleVersion(0)]
	public CodeLineContext codeLine() {
		CodeLineContext _localctx = new CodeLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_codeLine);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				directive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				segment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				bootAddr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				memoryAlloc();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85;
				label();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 86;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SdccOptsContext[] sdccOpts() {
			return GetRuleContexts<SdccOptsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SdccOptsContext sdccOpts(int i) {
			return GetRuleContext<SdccOptsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SdAsmParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SdAsmParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_directive);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				Match(Dot);
				State = 90;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				Match(Dot);
				State = 92;
				Match(T__3);
				State = 93;
				moduleName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94;
				Match(Dot);
				State = 95;
				Match(T__4);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 96;
					sdccOpts();
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Minus );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 101;
				Match(Dot);
				State = 102;
				Match(T__5);
				State = 103;
				Match(Identifier);
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 104;
					Match(Comma);
					State = 105;
					Match(Identifier);
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		ModuleNameContext _localctx = new ModuleNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SdccOptsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(SdAsmParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(SdAsmParser.Minus, i);
		}
		public SdccOptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sdccOpts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSdccOpts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSdccOpts(this);
		}
	}

	[RuleVersion(0)]
	public SdccOptsContext sdccOpts() {
		SdccOptsContext _localctx = new SdccOptsContext(Context, State);
		EnterRule(_localctx, 8, RULE_sdccOpts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 115;
				Match(Minus);
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Minus );
			State = 120;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SegmentType() { return GetToken(SdAsmParser.SegmentType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SegmentNameContext segmentName() {
			return GetRuleContext<SegmentNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SegmentOptsContext[] segmentOpts() {
			return GetRuleContexts<SegmentOptsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentOptsContext segmentOpts(int i) {
			return GetRuleContext<SegmentOptsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_segment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(Dot);
			State = 123;
			Match(SegmentType);
			State = 124;
			segmentName();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 125;
				Match(LeftParen);
				State = 126;
				segmentOpts();
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 127;
					Match(Comma);
					State = 128;
					segmentOpts();
					}
					}
					State = 133;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 134;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		public SegmentNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegmentName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegmentName(this);
		}
	}

	[RuleVersion(0)]
	public SegmentNameContext segmentName() {
		SegmentNameContext _localctx = new SegmentNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_segmentName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentOptsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SdAsmParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SdAsmParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdAsmParser.Assign, 0); }
		public SegmentOptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentOpts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegmentOpts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegmentOpts(this);
		}
	}

	[RuleVersion(0)]
	public SegmentOptsContext segmentOpts() {
		SegmentOptsContext _localctx = new SegmentOptsContext(Context, State);
		EnterRule(_localctx, 14, RULE_segmentOpts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			Match(Identifier);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 141;
				Match(Assign);
				State = 142;
				Match(Identifier);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BootAddrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORG() { return GetToken(SdAsmParser.ORG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public BootAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bootAddr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterBootAddr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitBootAddr(this);
		}
	}

	[RuleVersion(0)]
	public BootAddrContext bootAddr() {
		BootAddrContext _localctx = new BootAddrContext(Context, State);
		EnterRule(_localctx, 16, RULE_bootAddr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(Dot);
			State = 146;
			Match(ORG);
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 147;
				Match(Number);
				}
				break;
			case 2:
				{
				State = 148;
				expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryAllocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DataType() { return GetToken(SdAsmParser.DataType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDataContext[] memoryData() {
			return GetRuleContexts<MemoryDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDataContext memoryData(int i) {
			return GetRuleContext<MemoryDataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public MemoryAllocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryAlloc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterMemoryAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitMemoryAlloc(this);
		}
	}

	[RuleVersion(0)]
	public MemoryAllocContext memoryAlloc() {
		MemoryAllocContext _localctx = new MemoryAllocContext(Context, State);
		EnterRule(_localctx, 18, RULE_memoryAlloc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(Dot);
			State = 152;
			Match(DataType);
			State = 153;
			memoryData();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 154;
				Match(Comma);
				State = 155;
				memoryData();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SdAsmParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		public MemoryDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterMemoryData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitMemoryData(this);
		}
	}

	[RuleVersion(0)]
	public MemoryDataContext memoryData() {
		MemoryDataContext _localctx = new MemoryDataContext(Context, State);
		EnterRule(_localctx, 20, RULE_memoryData);
		int _la;
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161;
				Match(Number);
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__6) {
					{
					State = 162;
					Match(T__6);
					}
				}

				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				Match(StringLiteral);
				}
				break;
			case LeftParen:
			case Pound:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pound) {
					{
					State = 166;
					Match(Pound);
					}
				}

				State = 169;
				Match(LeftParen);
				State = 170;
				expr(0);
				State = 171;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdAsmParser.Not, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStatement);
		int _la;
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175;
				Match(T__7);
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Not) {
					{
					State = 176;
					Match(Not);
					}
				}

				State = 179;
				Match(Identifier);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(T__8);
				State = 181;
				Match(Identifier);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				Match(T__9);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalLabelContext normalLabel() {
			return GetRuleContext<NormalLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineLabelContext inlineLabel() {
			return GetRuleContext<InlineLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(SdAsmParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(SdAsmParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine() {
			return GetRuleContext<CodeLineContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 24, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dot:
			case Identifier:
				{
				State = 186;
				normalLabel();
				}
				break;
			case Number:
				{
				State = 187;
				inlineLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 190;
				Match(Colon);
				}
				}
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Colon );
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Dot) | (1L << Number) | (1L << Identifier))) != 0)) {
				{
				State = 195;
				codeLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbsAddrAllocExprContext absAddrAllocExpr() {
			return GetRuleContext<AbsAddrAllocExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_statement);
		int _la;
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				absAddrAllocExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 199;
				instruction();
				State = 201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << Dot) | (1L << LeftParen) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << AndAnd) | (1L << OrOr) | (1L << Not) | (1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde) | (1L << Assign) | (1L << SingleQuote) | (1L << Quote) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0)) {
					{
					State = 200;
					expressions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsAddrAllocExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdAsmParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		public AbsAddrAllocExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absAddrAllocExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAbsAddrAllocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAbsAddrAllocExpr(this);
		}
	}

	[RuleVersion(0)]
	public AbsAddrAllocExprContext absAddrAllocExpr() {
		AbsAddrAllocExprContext _localctx = new AbsAddrAllocExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_absAddrAllocExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			Match(Identifier);
			State = 206;
			Match(Assign);
			State = 207;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 30, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			expr(0);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 212;
				Match(Comma);
				State = 213;
				expr(0);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 220;
				@operator();
				State = 221;
				operand();
				}
				break;
			case 2:
				{
				State = 223;
				operand();
				State = 224;
				Match(Dot);
				State = 225;
				Match(Number);
				}
				break;
			case 3:
				{
				State = 227;
				operand();
				}
				break;
			case 4:
				{
				State = 234;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Pound:
					{
					State = 228;
					Match(Pound);
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << Less) | (1L << Greater) | (1L << SingleQuote) | (1L << Quote))) != 0)) {
						{
						State = 229;
						unaryOperator();
						}
					}

					}
					break;
				case T__11:
				case Less:
				case Greater:
				case SingleQuote:
				case Quote:
					{
					State = 232;
					unaryOperator();
					}
					break;
				case Number:
					{
					State = 233;
					Match(Number);
					}
					break;
				case LeftParen:
					break;
				default:
					break;
				}
				State = 236;
				Match(LeftParen);
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 237;
					expressions();
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__12) | (1L << Dot) | (1L << LeftParen) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << AndAnd) | (1L << OrOr) | (1L << Not) | (1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde) | (1L << Assign) | (1L << SingleQuote) | (1L << Quote) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0) );
				State = 242;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 246;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 247;
					@operator();
					State = 248;
					expr(6);
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NormalLabelContext normalLabel() {
			return GetRuleContext<NormalLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineLabelContext inlineLabel() {
			return GetRuleContext<InlineLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SdAsmParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 36, RULE_operand);
		int _la;
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				Match(Number);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pound) {
					{
					State = 256;
					Match(Pound);
					}
				}

				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 259;
					Match(AT);
					}
				}

				State = 264;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Dot:
				case Identifier:
					{
					State = 262;
					normalLabel();
					}
					break;
				case Number:
					{
					State = 263;
					inlineLabel();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266;
				Match(Dot);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperatorContext arithmeticOperator() {
			return GetRuleContext<ArithmeticOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_operator);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				arithmeticOperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270;
				unaryOperator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 271;
				bitOperator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 272;
				compareOperator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 273;
				logicalOperator();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 274;
				assignmentOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(SdAsmParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(SdAsmParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(SdAsmParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(SdAsmParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(SdAsmParser.Mod, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterArithmeticOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitArithmeticOperator(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperatorContext arithmeticOperator() {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_arithmeticOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(SdAsmParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(SdAsmParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleQuote() { return GetToken(SdAsmParser.SingleQuote, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quote() { return GetToken(SdAsmParser.Quote, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << Less) | (1L << Greater) | (1L << SingleQuote) | (1L << Quote))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdAsmParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SdAsmParser.Equal, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << Equal) | (1L << Assign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(SdAsmParser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift() { return GetToken(SdAsmParser.RightShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SdAsmParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SdAsmParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(SdAsmParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(SdAsmParser.Caret, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_bitOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SdAsmParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(SdAsmParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(SdAsmParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(SdAsmParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(SdAsmParser.LessEqual, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << NotEqual))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(SdAsmParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(SdAsmParser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdAsmParser.Not, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AndAnd) | (1L << OrOr) | (1L << Not))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		public NormalLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterNormalLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitNormalLabel(this);
		}
	}

	[RuleVersion(0)]
	public NormalLabelContext normalLabel() {
		NormalLabelContext _localctx = new NormalLabelContext(Context, State);
		EnterRule(_localctx, 52, RULE_normalLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dot) {
				{
				State = 289;
				Match(Dot);
				}
			}

			State = 292;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		public InlineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterInlineLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitInlineLabel(this);
		}
	}

	[RuleVersion(0)]
	public InlineLabelContext inlineLabel() {
		InlineLabelContext _localctx = new InlineLabelContext(Context, State);
		EnterRule(_localctx, 54, RULE_inlineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			Match(Number);
			State = 295;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,66,298,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,0,1,0,4,0,65,8,0,11,0,12,0,66,5,0,69,8,0,10,0,12,
		0,72,9,0,1,0,1,0,1,0,1,0,1,0,3,0,79,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,88,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,98,8,2,11,2,12,2,99,1,2,1,
		2,1,2,1,2,1,2,5,2,107,8,2,10,2,12,2,110,9,2,3,2,112,8,2,1,3,1,3,1,4,4,
		4,117,8,4,11,4,12,4,118,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,130,8,
		5,10,5,12,5,133,9,5,1,5,1,5,3,5,137,8,5,1,6,1,6,1,7,1,7,1,7,3,7,144,8,
		7,1,8,1,8,1,8,1,8,3,8,150,8,8,1,9,1,9,1,9,1,9,1,9,5,9,157,8,9,10,9,12,
		9,160,9,9,1,10,1,10,3,10,164,8,10,1,10,1,10,3,10,168,8,10,1,10,1,10,1,
		10,1,10,3,10,174,8,10,1,11,1,11,3,11,178,8,11,1,11,1,11,1,11,1,11,1,11,
		3,11,185,8,11,1,12,1,12,3,12,189,8,12,1,12,4,12,192,8,12,11,12,12,12,193,
		1,12,3,12,197,8,12,1,13,1,13,1,13,3,13,202,8,13,3,13,204,8,13,1,14,1,14,
		1,14,1,14,1,15,1,15,1,16,1,16,1,16,5,16,215,8,16,10,16,12,16,218,9,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,231,8,17,1,
		17,1,17,3,17,235,8,17,1,17,1,17,4,17,239,8,17,11,17,12,17,240,1,17,1,17,
		3,17,245,8,17,1,17,1,17,1,17,1,17,5,17,251,8,17,10,17,12,17,254,9,17,1,
		18,1,18,3,18,258,8,18,1,18,3,18,261,8,18,1,18,1,18,3,18,265,8,18,1,18,
		3,18,268,8,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,276,8,19,1,20,1,20,1,
		21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,3,26,291,8,26,1,26,
		1,26,1,27,1,27,1,27,1,27,0,1,34,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,46,48,50,52,54,0,7,1,0,1,3,1,0,25,29,4,0,12,
		12,19,19,21,21,53,54,3,0,13,13,23,23,39,39,1,0,33,38,2,0,19,22,24,24,1,
		0,30,32,325,0,78,1,0,0,0,2,87,1,0,0,0,4,111,1,0,0,0,6,113,1,0,0,0,8,116,
		1,0,0,0,10,122,1,0,0,0,12,138,1,0,0,0,14,140,1,0,0,0,16,145,1,0,0,0,18,
		151,1,0,0,0,20,173,1,0,0,0,22,184,1,0,0,0,24,188,1,0,0,0,26,203,1,0,0,
		0,28,205,1,0,0,0,30,209,1,0,0,0,32,211,1,0,0,0,34,244,1,0,0,0,36,267,1,
		0,0,0,38,275,1,0,0,0,40,277,1,0,0,0,42,279,1,0,0,0,44,281,1,0,0,0,46,283,
		1,0,0,0,48,285,1,0,0,0,50,287,1,0,0,0,52,290,1,0,0,0,54,294,1,0,0,0,56,
		58,5,59,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,
		70,1,0,0,0,61,59,1,0,0,0,62,64,3,2,1,0,63,65,5,59,0,0,64,63,1,0,0,0,65,
		66,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,62,1,0,0,0,69,
		72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,73,1,0,0,0,72,70,1,0,0,0,73,
		79,5,0,0,1,74,75,3,2,1,0,75,76,5,0,0,1,76,79,1,0,0,0,77,79,5,0,0,1,78,
		59,1,0,0,0,78,74,1,0,0,0,78,77,1,0,0,0,79,1,1,0,0,0,80,88,3,4,2,0,81,88,
		3,10,5,0,82,88,3,16,8,0,83,88,3,18,9,0,84,88,3,22,11,0,85,88,3,24,12,0,
		86,88,3,26,13,0,87,80,1,0,0,0,87,81,1,0,0,0,87,82,1,0,0,0,87,83,1,0,0,
		0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,3,1,0,0,0,89,90,5,14,0,
		0,90,112,7,0,0,0,91,92,5,14,0,0,92,93,5,4,0,0,93,112,3,6,3,0,94,95,5,14,
		0,0,95,97,5,5,0,0,96,98,3,8,4,0,97,96,1,0,0,0,98,99,1,0,0,0,99,97,1,0,
		0,0,99,100,1,0,0,0,100,112,1,0,0,0,101,102,5,14,0,0,102,103,5,6,0,0,103,
		108,5,63,0,0,104,105,5,56,0,0,105,107,5,63,0,0,106,104,1,0,0,0,107,110,
		1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,
		0,111,89,1,0,0,0,111,91,1,0,0,0,111,94,1,0,0,0,111,101,1,0,0,0,112,5,1,
		0,0,0,113,114,5,63,0,0,114,7,1,0,0,0,115,117,5,25,0,0,116,115,1,0,0,0,
		117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,121,
		5,63,0,0,121,9,1,0,0,0,122,123,5,14,0,0,123,124,5,60,0,0,124,136,3,12,
		6,0,125,126,5,15,0,0,126,131,3,14,7,0,127,128,5,56,0,0,128,130,3,14,7,
		0,129,127,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
		134,1,0,0,0,133,131,1,0,0,0,134,135,5,16,0,0,135,137,1,0,0,0,136,125,1,
		0,0,0,136,137,1,0,0,0,137,11,1,0,0,0,138,139,5,63,0,0,139,13,1,0,0,0,140,
		143,5,63,0,0,141,142,5,39,0,0,142,144,5,63,0,0,143,141,1,0,0,0,143,144,
		1,0,0,0,144,15,1,0,0,0,145,146,5,14,0,0,146,149,5,51,0,0,147,150,5,62,
		0,0,148,150,3,32,16,0,149,147,1,0,0,0,149,148,1,0,0,0,150,17,1,0,0,0,151,
		152,5,14,0,0,152,153,5,61,0,0,153,158,3,20,10,0,154,155,5,56,0,0,155,157,
		3,20,10,0,156,154,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,
		0,0,159,19,1,0,0,0,160,158,1,0,0,0,161,163,5,62,0,0,162,164,5,7,0,0,163,
		162,1,0,0,0,163,164,1,0,0,0,164,174,1,0,0,0,165,174,5,64,0,0,166,168,5,
		57,0,0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,5,15,0,
		0,170,171,3,34,17,0,171,172,5,16,0,0,172,174,1,0,0,0,173,161,1,0,0,0,173,
		165,1,0,0,0,173,167,1,0,0,0,174,21,1,0,0,0,175,177,5,8,0,0,176,178,5,32,
		0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,185,5,63,0,0,180,
		181,5,9,0,0,181,185,5,63,0,0,182,185,5,10,0,0,183,185,5,11,0,0,184,175,
		1,0,0,0,184,180,1,0,0,0,184,182,1,0,0,0,184,183,1,0,0,0,185,23,1,0,0,0,
		186,189,3,52,26,0,187,189,3,54,27,0,188,186,1,0,0,0,188,187,1,0,0,0,189,
		191,1,0,0,0,190,192,5,55,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,
		0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,197,3,2,1,0,196,195,1,0,0,0,
		196,197,1,0,0,0,197,25,1,0,0,0,198,204,3,28,14,0,199,201,3,30,15,0,200,
		202,3,32,16,0,201,200,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,198,
		1,0,0,0,203,199,1,0,0,0,204,27,1,0,0,0,205,206,5,63,0,0,206,207,5,39,0,
		0,207,208,5,62,0,0,208,29,1,0,0,0,209,210,5,63,0,0,210,31,1,0,0,0,211,
		216,3,34,17,0,212,213,5,56,0,0,213,215,3,34,17,0,214,212,1,0,0,0,215,218,
		1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,33,1,0,0,0,218,216,1,0,0,0,
		219,220,6,17,-1,0,220,221,3,38,19,0,221,222,3,36,18,0,222,245,1,0,0,0,
		223,224,3,36,18,0,224,225,5,14,0,0,225,226,5,62,0,0,226,245,1,0,0,0,227,
		245,3,36,18,0,228,230,5,57,0,0,229,231,3,42,21,0,230,229,1,0,0,0,230,231,
		1,0,0,0,231,235,1,0,0,0,232,235,3,42,21,0,233,235,5,62,0,0,234,228,1,0,
		0,0,234,232,1,0,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,
		238,5,15,0,0,237,239,3,32,16,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,
		1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,243,5,16,0,0,243,245,1,0,0,
		0,244,219,1,0,0,0,244,223,1,0,0,0,244,227,1,0,0,0,244,234,1,0,0,0,245,
		252,1,0,0,0,246,247,10,5,0,0,247,248,3,38,19,0,248,249,3,34,17,6,249,251,
		1,0,0,0,250,246,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,
		0,253,35,1,0,0,0,254,252,1,0,0,0,255,268,5,62,0,0,256,258,5,57,0,0,257,
		256,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,261,5,58,0,0,260,259,1,
		0,0,0,260,261,1,0,0,0,261,264,1,0,0,0,262,265,3,52,26,0,263,265,3,54,27,
		0,264,262,1,0,0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,268,5,14,0,0,267,
		255,1,0,0,0,267,257,1,0,0,0,267,266,1,0,0,0,268,37,1,0,0,0,269,276,3,40,
		20,0,270,276,3,42,21,0,271,276,3,46,23,0,272,276,3,48,24,0,273,276,3,50,
		25,0,274,276,3,44,22,0,275,269,1,0,0,0,275,270,1,0,0,0,275,271,1,0,0,0,
		275,272,1,0,0,0,275,273,1,0,0,0,275,274,1,0,0,0,276,39,1,0,0,0,277,278,
		7,1,0,0,278,41,1,0,0,0,279,280,7,2,0,0,280,43,1,0,0,0,281,282,7,3,0,0,
		282,45,1,0,0,0,283,284,7,4,0,0,284,47,1,0,0,0,285,286,7,5,0,0,286,49,1,
		0,0,0,287,288,7,6,0,0,288,51,1,0,0,0,289,291,5,14,0,0,290,289,1,0,0,0,
		290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,63,0,0,293,53,1,0,0,0,294,295,
		5,62,0,0,295,296,5,7,0,0,296,55,1,0,0,0,36,59,66,70,78,87,99,108,111,118,
		131,136,143,149,158,163,167,173,177,184,188,193,196,201,203,216,230,234,
		240,244,252,257,260,264,267,275,290
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
