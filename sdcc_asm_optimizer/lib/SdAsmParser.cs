//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./SdAsm.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SdAsmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, Dot=13, LeftParen=14, RightParen=15, LeftBracket=16, 
		RightBracket=17, Less=18, LessEqual=19, Greater=20, GreaterEqual=21, Equal=22, 
		NotEqual=23, Minus=24, Plus=25, Star=26, Div=27, Mod=28, AndAnd=29, OrOr=30, 
		Not=31, LeftShift=32, RightShift=33, And=34, Or=35, Caret=36, Tilde=37, 
		Assign=38, PlusAssign=39, MinusAssign=40, StarAssign=41, DivAssign=42, 
		ModAssign=43, LeftShiftAssign=44, RightShiftAssign=45, AndAssign=46, OrAssign=47, 
		XorAssign=48, TildeAssign=49, ORG=50, Question=51, SingleQuote=52, Quote=53, 
		Colon=54, Comma=55, Pound=56, AT=57, CRLF=58, SegmentType=59, DataType=60, 
		Number=61, Identifier=62, StringLiteral=63, WS=64, COMMENT=65;
	public const int
		RULE_asmFile = 0, RULE_codeLine = 1, RULE_directive = 2, RULE_moduleName = 3, 
		RULE_sdccOpts = 4, RULE_segment = 5, RULE_segmentSpec = 6, RULE_bootAddr = 7, 
		RULE_memoryAlloc = 8, RULE_memoryData = 9, RULE_ifStatement = 10, RULE_label = 11, 
		RULE_statement = 12, RULE_absAddrAllocExpr = 13, RULE_instruction = 14, 
		RULE_expressions = 15, RULE_expr = 16, RULE_operand = 17, RULE_operator = 18, 
		RULE_arithmeticOperator = 19, RULE_unaryOperator = 20, RULE_assignmentOperator = 21, 
		RULE_bitOperator = 22, RULE_compareOperator = 23, RULE_logicalOperator = 24, 
		RULE_normalLabel = 25, RULE_inlineLabel = 26;
	public static readonly string[] ruleNames = {
		"asmFile", "codeLine", "directive", "moduleName", "sdccOpts", "segment", 
		"segmentSpec", "bootAddr", "memoryAlloc", "memoryData", "ifStatement", 
		"label", "statement", "absAddrAllocExpr", "instruction", "expressions", 
		"expr", "operand", "operator", "arithmeticOperator", "unaryOperator", 
		"assignmentOperator", "bitOperator", "compareOperator", "logicalOperator", 
		"normalLabel", "inlineLabel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'16bit'", "'24bit'", "'32bit'", "'module'", "'optsdcc'", "'$'", 
		"'.if'", "'.ifdef'", "'.else'", "'.endif'", "'\\'", "'=:'", "'.'", "'('", 
		"')'", "'['", "']'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'-'", 
		"'+'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'!'", "'<<'", "'>>'", "'&'", 
		"'|'", "'^'", "'~'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", 
		"'>>='", "'&='", "'|='", "'^='", "'~='", "'org'", "'?'", "'''", "'\"'", 
		"':'", "','", "'#'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "Dot", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "Equal", "NotEqual", "Minus", 
		"Plus", "Star", "Div", "Mod", "AndAnd", "OrOr", "Not", "LeftShift", "RightShift", 
		"And", "Or", "Caret", "Tilde", "Assign", "PlusAssign", "MinusAssign", 
		"StarAssign", "DivAssign", "ModAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "OrAssign", "XorAssign", "TildeAssign", "ORG", "Question", 
		"SingleQuote", "Quote", "Colon", "Comma", "Pound", "AT", "CRLF", "SegmentType", 
		"DataType", "Number", "Identifier", "StringLiteral", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SdAsm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SdAsmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SdAsmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SdAsmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class AsmFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SdAsmParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CRLF() { return GetTokens(SdAsmParser.CRLF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRLF(int i) {
			return GetToken(SdAsmParser.CRLF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext[] codeLine() {
			return GetRuleContexts<CodeLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine(int i) {
			return GetRuleContext<CodeLineContext>(i);
		}
		public AsmFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAsmFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAsmFile(this);
		}
	}

	[RuleVersion(0)]
	public AsmFileContext asmFile() {
		AsmFileContext _localctx = new AsmFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_asmFile);
		int _la;
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CRLF) {
					{
					{
					State = 54;
					Match(CRLF);
					}
					}
					State = 59;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << Dot) | (1L << Number) | (1L << Identifier))) != 0)) {
					{
					{
					State = 60;
					codeLine();
					State = 62;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 61;
						Match(CRLF);
						}
						}
						State = 64;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CRLF );
					}
					}
					State = 70;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 71;
				Match(Eof);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				codeLine();
				State = 73;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 75;
				Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeLineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectiveContext directive() {
			return GetRuleContext<DirectiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentContext segment() {
			return GetRuleContext<SegmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BootAddrContext bootAddr() {
			return GetRuleContext<BootAddrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryAllocContext memoryAlloc() {
			return GetRuleContext<MemoryAllocContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CodeLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterCodeLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitCodeLine(this);
		}
	}

	[RuleVersion(0)]
	public CodeLineContext codeLine() {
		CodeLineContext _localctx = new CodeLineContext(Context, State);
		EnterRule(_localctx, 2, RULE_codeLine);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				directive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				segment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80;
				bootAddr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 81;
				memoryAlloc();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 82;
				ifStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 83;
				label();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 84;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleNameContext moduleName() {
			return GetRuleContext<ModuleNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SdccOptsContext[] sdccOpts() {
			return GetRuleContexts<SdccOptsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SdccOptsContext sdccOpts(int i) {
			return GetRuleContext<SdccOptsContext>(i);
		}
		public DirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterDirective(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitDirective(this);
		}
	}

	[RuleVersion(0)]
	public DirectiveContext directive() {
		DirectiveContext _localctx = new DirectiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_directive);
		int _la;
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 87;
				Match(Dot);
				State = 88;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				Match(Dot);
				State = 90;
				Match(T__3);
				State = 91;
				moduleName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(Dot);
				State = 93;
				Match(T__4);
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 94;
					sdccOpts();
					}
					}
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Minus );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		public ModuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterModuleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitModuleName(this);
		}
	}

	[RuleVersion(0)]
	public ModuleNameContext moduleName() {
		ModuleNameContext _localctx = new ModuleNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SdccOptsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(SdAsmParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(SdAsmParser.Minus, i);
		}
		public SdccOptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sdccOpts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSdccOpts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSdccOpts(this);
		}
	}

	[RuleVersion(0)]
	public SdccOptsContext sdccOpts() {
		SdccOptsContext _localctx = new SdccOptsContext(Context, State);
		EnterRule(_localctx, 8, RULE_sdccOpts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 103;
				Match(Minus);
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Minus );
			State = 108;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SegmentType() { return GetToken(SdAsmParser.SegmentType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SegmentSpecContext segmentSpec() {
			return GetRuleContext<SegmentSpecContext>(0);
		}
		public SegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegment(this);
		}
	}

	[RuleVersion(0)]
	public SegmentContext segment() {
		SegmentContext _localctx = new SegmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_segment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(Dot);
			State = 111;
			Match(SegmentType);
			State = 112;
			segmentSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SegmentSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SdAsmParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SdAsmParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(SdAsmParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(SdAsmParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(SdAsmParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(SdAsmParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentSpecContext[] segmentSpec() {
			return GetRuleContexts<SegmentSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SegmentSpecContext segmentSpec(int i) {
			return GetRuleContext<SegmentSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public SegmentSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segmentSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterSegmentSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitSegmentSpec(this);
		}
	}

	[RuleVersion(0)]
	public SegmentSpecContext segmentSpec() {
		SegmentSpecContext _localctx = new SegmentSpecContext(Context, State);
		EnterRule(_localctx, 12, RULE_segmentSpec);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(Identifier);
			State = 129;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 127;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Identifier:
						{
						State = 115;
						Match(Identifier);
						}
						break;
					case LeftParen:
						{
						State = 116;
						Match(LeftParen);
						State = 121;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 117;
							segmentSpec();
							State = 119;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==Comma) {
								{
								State = 118;
								Match(Comma);
								}
							}

							}
							}
							State = 123;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==Identifier );
						State = 125;
						Match(RightParen);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 131;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BootAddrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORG() { return GetToken(SdAsmParser.ORG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public BootAddrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bootAddr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterBootAddr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitBootAddr(this);
		}
	}

	[RuleVersion(0)]
	public BootAddrContext bootAddr() {
		BootAddrContext _localctx = new BootAddrContext(Context, State);
		EnterRule(_localctx, 14, RULE_bootAddr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(Dot);
			State = 133;
			Match(ORG);
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 134;
				Match(Number);
				}
				break;
			case 2:
				{
				State = 135;
				expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryAllocContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DataType() { return GetToken(SdAsmParser.DataType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDataContext[] memoryData() {
			return GetRuleContexts<MemoryDataContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryDataContext memoryData(int i) {
			return GetRuleContext<MemoryDataContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public MemoryAllocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryAlloc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterMemoryAlloc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitMemoryAlloc(this);
		}
	}

	[RuleVersion(0)]
	public MemoryAllocContext memoryAlloc() {
		MemoryAllocContext _localctx = new MemoryAllocContext(Context, State);
		EnterRule(_localctx, 16, RULE_memoryAlloc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(Dot);
			State = 139;
			Match(DataType);
			State = 140;
			memoryData();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 141;
				Match(Comma);
				State = 142;
				memoryData();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryDataContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(SdAsmParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		public MemoryDataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoryData; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterMemoryData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitMemoryData(this);
		}
	}

	[RuleVersion(0)]
	public MemoryDataContext memoryData() {
		MemoryDataContext _localctx = new MemoryDataContext(Context, State);
		EnterRule(_localctx, 18, RULE_memoryData);
		int _la;
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148;
				Match(Number);
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 149;
					Match(T__5);
					}
				}

				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				Match(StringLiteral);
				}
				break;
			case LeftParen:
			case Pound:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pound) {
					{
					State = 153;
					Match(Pound);
					}
				}

				State = 156;
				Match(LeftParen);
				State = 157;
				expr(0);
				State = 158;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdAsmParser.Not, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				Match(T__6);
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Not) {
					{
					State = 163;
					Match(Not);
					}
				}

				State = 166;
				Match(Identifier);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 167;
				Match(T__7);
				State = 168;
				Match(Identifier);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				Match(T__8);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NormalLabelContext normalLabel() {
			return GetRuleContext<NormalLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineLabelContext inlineLabel() {
			return GetRuleContext<InlineLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(SdAsmParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(SdAsmParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CodeLineContext codeLine() {
			return GetRuleContext<CodeLineContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 22, RULE_label);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Dot:
			case Identifier:
				{
				State = 173;
				normalLabel();
				}
				break;
			case Number:
				{
				State = 174;
				inlineLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 177;
				Match(Colon);
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Colon );
			State = 183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << Dot) | (1L << Number) | (1L << Identifier))) != 0)) {
				{
				State = 182;
				codeLine();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AbsAddrAllocExprContext absAddrAllocExpr() {
			return GetRuleContext<AbsAddrAllocExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				absAddrAllocExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				instruction();
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << Dot) | (1L << LeftParen) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << AndAnd) | (1L << OrOr) | (1L << Not) | (1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde) | (1L << Assign) | (1L << SingleQuote) | (1L << Quote) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0)) {
					{
					State = 187;
					expressions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsAddrAllocExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdAsmParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		public AbsAddrAllocExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_absAddrAllocExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAbsAddrAllocExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAbsAddrAllocExpr(this);
		}
	}

	[RuleVersion(0)]
	public AbsAddrAllocExprContext absAddrAllocExpr() {
		AbsAddrAllocExprContext _localctx = new AbsAddrAllocExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_absAddrAllocExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(Identifier);
			State = 193;
			Match(Assign);
			State = 194;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 28, RULE_instruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdAsmParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdAsmParser.Comma, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 30, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			expr(0);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 199;
				Match(Comma);
				State = 200;
				expr(0);
				}
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdAsmParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdAsmParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext[] expressions() {
			return GetRuleContexts<ExpressionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions(int i) {
			return GetRuleContext<ExpressionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 207;
				@operator();
				State = 208;
				operand();
				}
				break;
			case 2:
				{
				State = 210;
				operand();
				State = 211;
				Match(Dot);
				State = 212;
				Match(Number);
				}
				break;
			case 3:
				{
				State = 214;
				operand();
				}
				break;
			case 4:
				{
				State = 221;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Pound:
					{
					State = 215;
					Match(Pound);
					State = 217;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << Less) | (1L << Greater) | (1L << SingleQuote) | (1L << Quote))) != 0)) {
						{
						State = 216;
						unaryOperator();
						}
					}

					}
					break;
				case T__10:
				case Less:
				case Greater:
				case SingleQuote:
				case Quote:
					{
					State = 219;
					unaryOperator();
					}
					break;
				case Number:
					{
					State = 220;
					Match(Number);
					}
					break;
				case LeftParen:
					break;
				default:
					break;
				}
				State = 223;
				Match(LeftParen);
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 224;
					expressions();
					}
					}
					State = 227;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << Dot) | (1L << LeftParen) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << Equal) | (1L << NotEqual) | (1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod) | (1L << AndAnd) | (1L << OrOr) | (1L << Not) | (1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde) | (1L << Assign) | (1L << SingleQuote) | (1L << Quote) | (1L << Pound) | (1L << AT) | (1L << Number) | (1L << Identifier))) != 0) );
				State = 229;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 233;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 234;
					@operator();
					State = 235;
					expr(6);
					}
					} 
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NormalLabelContext normalLabel() {
			return GetRuleContext<NormalLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InlineLabelContext inlineLabel() {
			return GetRuleContext<InlineLabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pound() { return GetToken(SdAsmParser.Pound, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(SdAsmParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 34, RULE_operand);
		int _la;
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				Match(Number);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pound) {
					{
					State = 243;
					Match(Pound);
					}
				}

				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT) {
					{
					State = 246;
					Match(AT);
					}
				}

				State = 251;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Dot:
				case Identifier:
					{
					State = 249;
					normalLabel();
					}
					break;
				case Number:
					{
					State = 250;
					inlineLabel();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 253;
				Match(Dot);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticOperatorContext arithmeticOperator() {
			return GetRuleContext<ArithmeticOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorContext compareOperator() {
			return GetRuleContext<CompareOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 36, RULE_operator);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				arithmeticOperator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				unaryOperator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 258;
				bitOperator();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 259;
				compareOperator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 260;
				logicalOperator();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 261;
				assignmentOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(SdAsmParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(SdAsmParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(SdAsmParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div() { return GetToken(SdAsmParser.Div, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod() { return GetToken(SdAsmParser.Mod, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterArithmeticOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitArithmeticOperator(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticOperatorContext arithmeticOperator() {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(Context, State);
		EnterRule(_localctx, 38, RULE_arithmeticOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Minus) | (1L << Plus) | (1L << Star) | (1L << Div) | (1L << Mod))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(SdAsmParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(SdAsmParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleQuote() { return GetToken(SdAsmParser.SingleQuote, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quote() { return GetToken(SdAsmParser.Quote, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << Less) | (1L << Greater) | (1L << SingleQuote) | (1L << Quote))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdAsmParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(SdAsmParser.Equal, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << Equal) | (1L << Assign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(SdAsmParser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift() { return GetToken(SdAsmParser.RightShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SdAsmParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SdAsmParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(SdAsmParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret() { return GetToken(SdAsmParser.Caret, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 44, RULE_bitOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LeftShift) | (1L << RightShift) | (1L << And) | (1L << Or) | (1L << Caret) | (1L << Tilde))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(SdAsmParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(SdAsmParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual() { return GetToken(SdAsmParser.GreaterEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less() { return GetToken(SdAsmParser.Less, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual() { return GetToken(SdAsmParser.LessEqual, 0); }
		public CompareOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterCompareOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitCompareOperator(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorContext compareOperator() {
		CompareOperatorContext _localctx = new CompareOperatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_compareOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual) | (1L << NotEqual))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(SdAsmParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr() { return GetToken(SdAsmParser.OrOr, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdAsmParser.Not, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 48, RULE_logicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AndAnd) | (1L << OrOr) | (1L << Not))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NormalLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdAsmParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdAsmParser.Dot, 0); }
		public NormalLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_normalLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterNormalLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitNormalLabel(this);
		}
	}

	[RuleVersion(0)]
	public NormalLabelContext normalLabel() {
		NormalLabelContext _localctx = new NormalLabelContext(Context, State);
		EnterRule(_localctx, 50, RULE_normalLabel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Dot) {
				{
				State = 276;
				Match(Dot);
				}
			}

			State = 279;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineLabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SdAsmParser.Number, 0); }
		public InlineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineLabel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.EnterInlineLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdAsmListener typedListener = listener as ISdAsmListener;
			if (typedListener != null) typedListener.ExitInlineLabel(this);
		}
	}

	[RuleVersion(0)]
	public InlineLabelContext inlineLabel() {
		InlineLabelContext _localctx = new InlineLabelContext(Context, State);
		EnterRule(_localctx, 52, RULE_inlineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(Number);
			State = 282;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,65,285,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,5,0,56,8,0,10,0,
		12,0,59,9,0,1,0,1,0,4,0,63,8,0,11,0,12,0,64,5,0,67,8,0,10,0,12,0,70,9,
		0,1,0,1,0,1,0,1,0,1,0,3,0,77,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,86,8,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,96,8,2,11,2,12,2,97,3,2,100,8,2,
		1,3,1,3,1,4,4,4,105,8,4,11,4,12,4,106,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,
		1,6,1,6,1,6,3,6,120,8,6,4,6,122,8,6,11,6,12,6,123,1,6,1,6,5,6,128,8,6,
		10,6,12,6,131,9,6,1,7,1,7,1,7,1,7,3,7,137,8,7,1,8,1,8,1,8,1,8,1,8,5,8,
		144,8,8,10,8,12,8,147,9,8,1,9,1,9,3,9,151,8,9,1,9,1,9,3,9,155,8,9,1,9,
		1,9,1,9,1,9,3,9,161,8,9,1,10,1,10,3,10,165,8,10,1,10,1,10,1,10,1,10,1,
		10,3,10,172,8,10,1,11,1,11,3,11,176,8,11,1,11,4,11,179,8,11,11,11,12,11,
		180,1,11,3,11,184,8,11,1,12,1,12,1,12,3,12,189,8,12,3,12,191,8,12,1,13,
		1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,5,15,202,8,15,10,15,12,15,205,
		9,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,218,8,
		16,1,16,1,16,3,16,222,8,16,1,16,1,16,4,16,226,8,16,11,16,12,16,227,1,16,
		1,16,3,16,232,8,16,1,16,1,16,1,16,1,16,5,16,238,8,16,10,16,12,16,241,9,
		16,1,17,1,17,3,17,245,8,17,1,17,3,17,248,8,17,1,17,1,17,3,17,252,8,17,
		1,17,3,17,255,8,17,1,18,1,18,1,18,1,18,1,18,1,18,3,18,263,8,18,1,19,1,
		19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,3,25,278,8,25,
		1,25,1,25,1,26,1,26,1,26,1,26,0,1,32,27,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,0,7,1,0,1,3,1,0,24,28,4,0,
		11,11,18,18,20,20,52,53,3,0,12,12,22,22,38,38,1,0,32,37,2,0,18,21,23,23,
		1,0,29,31,312,0,76,1,0,0,0,2,85,1,0,0,0,4,99,1,0,0,0,6,101,1,0,0,0,8,104,
		1,0,0,0,10,110,1,0,0,0,12,114,1,0,0,0,14,132,1,0,0,0,16,138,1,0,0,0,18,
		160,1,0,0,0,20,171,1,0,0,0,22,175,1,0,0,0,24,190,1,0,0,0,26,192,1,0,0,
		0,28,196,1,0,0,0,30,198,1,0,0,0,32,231,1,0,0,0,34,254,1,0,0,0,36,262,1,
		0,0,0,38,264,1,0,0,0,40,266,1,0,0,0,42,268,1,0,0,0,44,270,1,0,0,0,46,272,
		1,0,0,0,48,274,1,0,0,0,50,277,1,0,0,0,52,281,1,0,0,0,54,56,5,58,0,0,55,
		54,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,58,68,1,0,0,0,59,
		57,1,0,0,0,60,62,3,2,1,0,61,63,5,58,0,0,62,61,1,0,0,0,63,64,1,0,0,0,64,
		62,1,0,0,0,64,65,1,0,0,0,65,67,1,0,0,0,66,60,1,0,0,0,67,70,1,0,0,0,68,
		66,1,0,0,0,68,69,1,0,0,0,69,71,1,0,0,0,70,68,1,0,0,0,71,77,5,0,0,1,72,
		73,3,2,1,0,73,74,5,0,0,1,74,77,1,0,0,0,75,77,5,0,0,1,76,57,1,0,0,0,76,
		72,1,0,0,0,76,75,1,0,0,0,77,1,1,0,0,0,78,86,3,4,2,0,79,86,3,10,5,0,80,
		86,3,14,7,0,81,86,3,16,8,0,82,86,3,20,10,0,83,86,3,22,11,0,84,86,3,24,
		12,0,85,78,1,0,0,0,85,79,1,0,0,0,85,80,1,0,0,0,85,81,1,0,0,0,85,82,1,0,
		0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,3,1,0,0,0,87,88,5,13,0,0,88,100,7,0,
		0,0,89,90,5,13,0,0,90,91,5,4,0,0,91,100,3,6,3,0,92,93,5,13,0,0,93,95,5,
		5,0,0,94,96,3,8,4,0,95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,
		0,0,0,98,100,1,0,0,0,99,87,1,0,0,0,99,89,1,0,0,0,99,92,1,0,0,0,100,5,1,
		0,0,0,101,102,5,62,0,0,102,7,1,0,0,0,103,105,5,24,0,0,104,103,1,0,0,0,
		105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,109,
		5,62,0,0,109,9,1,0,0,0,110,111,5,13,0,0,111,112,5,59,0,0,112,113,3,12,
		6,0,113,11,1,0,0,0,114,129,5,62,0,0,115,128,5,62,0,0,116,121,5,14,0,0,
		117,119,3,12,6,0,118,120,5,55,0,0,119,118,1,0,0,0,119,120,1,0,0,0,120,
		122,1,0,0,0,121,117,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,
		0,0,0,124,125,1,0,0,0,125,126,5,15,0,0,126,128,1,0,0,0,127,115,1,0,0,0,
		127,116,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,13,
		1,0,0,0,131,129,1,0,0,0,132,133,5,13,0,0,133,136,5,50,0,0,134,137,5,61,
		0,0,135,137,3,30,15,0,136,134,1,0,0,0,136,135,1,0,0,0,137,15,1,0,0,0,138,
		139,5,13,0,0,139,140,5,60,0,0,140,145,3,18,9,0,141,142,5,55,0,0,142,144,
		3,18,9,0,143,141,1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,
		0,146,17,1,0,0,0,147,145,1,0,0,0,148,150,5,61,0,0,149,151,5,6,0,0,150,
		149,1,0,0,0,150,151,1,0,0,0,151,161,1,0,0,0,152,161,5,63,0,0,153,155,5,
		56,0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,5,14,0,
		0,157,158,3,32,16,0,158,159,5,15,0,0,159,161,1,0,0,0,160,148,1,0,0,0,160,
		152,1,0,0,0,160,154,1,0,0,0,161,19,1,0,0,0,162,164,5,7,0,0,163,165,5,31,
		0,0,164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,172,5,62,0,0,167,
		168,5,8,0,0,168,172,5,62,0,0,169,172,5,9,0,0,170,172,5,10,0,0,171,162,
		1,0,0,0,171,167,1,0,0,0,171,169,1,0,0,0,171,170,1,0,0,0,172,21,1,0,0,0,
		173,176,3,50,25,0,174,176,3,52,26,0,175,173,1,0,0,0,175,174,1,0,0,0,176,
		178,1,0,0,0,177,179,5,54,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,
		0,0,0,180,181,1,0,0,0,181,183,1,0,0,0,182,184,3,2,1,0,183,182,1,0,0,0,
		183,184,1,0,0,0,184,23,1,0,0,0,185,191,3,26,13,0,186,188,3,28,14,0,187,
		189,3,30,15,0,188,187,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,185,
		1,0,0,0,190,186,1,0,0,0,191,25,1,0,0,0,192,193,5,62,0,0,193,194,5,38,0,
		0,194,195,5,61,0,0,195,27,1,0,0,0,196,197,5,62,0,0,197,29,1,0,0,0,198,
		203,3,32,16,0,199,200,5,55,0,0,200,202,3,32,16,0,201,199,1,0,0,0,202,205,
		1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,31,1,0,0,0,205,203,1,0,0,0,
		206,207,6,16,-1,0,207,208,3,36,18,0,208,209,3,34,17,0,209,232,1,0,0,0,
		210,211,3,34,17,0,211,212,5,13,0,0,212,213,5,61,0,0,213,232,1,0,0,0,214,
		232,3,34,17,0,215,217,5,56,0,0,216,218,3,40,20,0,217,216,1,0,0,0,217,218,
		1,0,0,0,218,222,1,0,0,0,219,222,3,40,20,0,220,222,5,61,0,0,221,215,1,0,
		0,0,221,219,1,0,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,
		225,5,14,0,0,224,226,3,30,15,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,
		1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,230,5,15,0,0,230,232,1,0,0,
		0,231,206,1,0,0,0,231,210,1,0,0,0,231,214,1,0,0,0,231,221,1,0,0,0,232,
		239,1,0,0,0,233,234,10,5,0,0,234,235,3,36,18,0,235,236,3,32,16,6,236,238,
		1,0,0,0,237,233,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,
		0,240,33,1,0,0,0,241,239,1,0,0,0,242,255,5,61,0,0,243,245,5,56,0,0,244,
		243,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,248,5,57,0,0,247,246,1,
		0,0,0,247,248,1,0,0,0,248,251,1,0,0,0,249,252,3,50,25,0,250,252,3,52,26,
		0,251,249,1,0,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,255,5,13,0,0,254,
		242,1,0,0,0,254,244,1,0,0,0,254,253,1,0,0,0,255,35,1,0,0,0,256,263,3,38,
		19,0,257,263,3,40,20,0,258,263,3,44,22,0,259,263,3,46,23,0,260,263,3,48,
		24,0,261,263,3,42,21,0,262,256,1,0,0,0,262,257,1,0,0,0,262,258,1,0,0,0,
		262,259,1,0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,37,1,0,0,0,264,265,
		7,1,0,0,265,39,1,0,0,0,266,267,7,2,0,0,267,41,1,0,0,0,268,269,7,3,0,0,
		269,43,1,0,0,0,270,271,7,4,0,0,271,45,1,0,0,0,272,273,7,5,0,0,273,47,1,
		0,0,0,274,275,7,6,0,0,275,49,1,0,0,0,276,278,5,13,0,0,277,276,1,0,0,0,
		277,278,1,0,0,0,278,279,1,0,0,0,279,280,5,62,0,0,280,51,1,0,0,0,281,282,
		5,61,0,0,282,283,5,6,0,0,283,53,1,0,0,0,36,57,64,68,76,85,97,99,106,119,
		123,127,129,136,145,150,154,160,164,171,175,180,183,188,190,203,217,221,
		227,231,239,244,247,251,254,262,277
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
