//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Sdcc.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SdccParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, Auto=40, Break=41, Case=42, Char=43, Const=44, Continue=45, 
		Default=46, Do=47, Double=48, Else=49, Enum=50, Extern=51, Float=52, For=53, 
		Goto=54, If=55, Inline=56, Int=57, Long=58, Register=59, Restrict=60, 
		Return=61, Short=62, Signed=63, Sizeof=64, Static=65, Struct=66, Switch=67, 
		Typedef=68, Union=69, Unsigned=70, Void=71, Volatile=72, While=73, Alignas=74, 
		Alignof=75, Atomic=76, Bool=77, Complex=78, Generic=79, Imaginary=80, 
		Noreturn=81, StaticAssert=82, ThreadLocal=83, LeftParen=84, RightParen=85, 
		LeftBracket=86, RightBracket=87, LeftBrace=88, RightBrace=89, Less=90, 
		LessEqual=91, Greater=92, GreaterEqual=93, LeftShift=94, RightShift=95, 
		Plus=96, PlusPlus=97, Minus=98, MinusMinus=99, Star=100, Div=101, Mod=102, 
		And=103, Or=104, AndAnd=105, OrOr=106, Caret=107, Not=108, Tilde=109, 
		Question=110, Colon=111, Semi=112, Comma=113, Assign=114, StarAssign=115, 
		DivAssign=116, ModAssign=117, PlusAssign=118, MinusAssign=119, LeftShiftAssign=120, 
		RightShiftAssign=121, AndAssign=122, XorAssign=123, OrAssign=124, Equal=125, 
		NotEqual=126, Arrow=127, Dot=128, Ellipsis=129, Identifier=130, Constant=131, 
		DigitSequence=132, StringLiteral=133, ComplexDefine=134, IncludeDirective=135, 
		AsmBlock=136, LineAfterPreprocessing=137, LineDirective=138, PragmaDirective=139, 
		Whitespace=140, Newline=141, BlockComment=142, LineComment=143;
	public const int
		RULE_primaryExpression = 0, RULE_genericSelection = 1, RULE_genericAssocList = 2, 
		RULE_genericAssociation = 3, RULE_postfixExpression = 4, RULE_argumentExpressionList = 5, 
		RULE_unaryExpression = 6, RULE_unaryOperator = 7, RULE_castExpression = 8, 
		RULE_multiplicativeExpression = 9, RULE_additiveExpression = 10, RULE_shiftExpression = 11, 
		RULE_relationalExpression = 12, RULE_equalityExpression = 13, RULE_andExpression = 14, 
		RULE_exclusiveOrExpression = 15, RULE_inclusiveOrExpression = 16, RULE_logicalAndExpression = 17, 
		RULE_logicalOrExpression = 18, RULE_conditionalExpression = 19, RULE_assignmentExpression = 20, 
		RULE_assignmentOperator = 21, RULE_expression = 22, RULE_constantExpression = 23, 
		RULE_declaration = 24, RULE_declarationSpecifiers = 25, RULE_declarationSpecifiers2 = 26, 
		RULE_declarationSpecifier = 27, RULE_initDeclaratorList = 28, RULE_initDeclarator = 29, 
		RULE_storageClassSpecifier = 30, RULE_typeSpecifier = 31, RULE_structOrUnionSpecifier = 32, 
		RULE_structOrUnion = 33, RULE_structDeclarationList = 34, RULE_structDeclaration = 35, 
		RULE_specifierQualifierList = 36, RULE_structDeclaratorList = 37, RULE_structDeclarator = 38, 
		RULE_enumSpecifier = 39, RULE_enumeratorList = 40, RULE_enumerator = 41, 
		RULE_enumerationConstant = 42, RULE_atomicTypeSpecifier = 43, RULE_typeQualifier = 44, 
		RULE_functionSpecifier = 45, RULE_alignmentSpecifier = 46, RULE_declarator = 47, 
		RULE_directDeclarator = 48, RULE_vcSpecificModifer = 49, RULE_gccDeclaratorExtension = 50, 
		RULE_gccAttributeSpecifier = 51, RULE_gccAttributeList = 52, RULE_gccAttribute = 53, 
		RULE_nestedParenthesesBlock = 54, RULE_pointer = 55, RULE_typeQualifierList = 56, 
		RULE_parameterTypeList = 57, RULE_parameterList = 58, RULE_parameterDeclaration = 59, 
		RULE_parameterTypeSpecifier = 60, RULE_identifierList = 61, RULE_typeName = 62, 
		RULE_abstractDeclarator = 63, RULE_directAbstractDeclarator = 64, RULE_typedefName = 65, 
		RULE_initializer = 66, RULE_initializerList = 67, RULE_designation = 68, 
		RULE_designatorList = 69, RULE_designator = 70, RULE_staticAssertDeclaration = 71, 
		RULE_statement = 72, RULE_labeledStatement = 73, RULE_compoundStatement = 74, 
		RULE_blockItemList = 75, RULE_blockItem = 76, RULE_expressionStatement = 77, 
		RULE_selectionStatement = 78, RULE_iterationStatement = 79, RULE_forCondition = 80, 
		RULE_forDeclaration = 81, RULE_forExpression = 82, RULE_jumpStatement = 83, 
		RULE_compilationUnit = 84, RULE_translationUnit = 85, RULE_externalDeclaration = 86, 
		RULE_functionDefinition = 87;
	public static readonly string[] ruleNames = {
		"primaryExpression", "genericSelection", "genericAssocList", "genericAssociation", 
		"postfixExpression", "argumentExpressionList", "unaryExpression", "unaryOperator", 
		"castExpression", "multiplicativeExpression", "additiveExpression", "shiftExpression", 
		"relationalExpression", "equalityExpression", "andExpression", "exclusiveOrExpression", 
		"inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
		"conditionalExpression", "assignmentExpression", "assignmentOperator", 
		"expression", "constantExpression", "declaration", "declarationSpecifiers", 
		"declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
		"initDeclarator", "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
		"structOrUnion", "structDeclarationList", "structDeclaration", "specifierQualifierList", 
		"structDeclaratorList", "structDeclarator", "enumSpecifier", "enumeratorList", 
		"enumerator", "enumerationConstant", "atomicTypeSpecifier", "typeQualifier", 
		"functionSpecifier", "alignmentSpecifier", "declarator", "directDeclarator", 
		"vcSpecificModifer", "gccDeclaratorExtension", "gccAttributeSpecifier", 
		"gccAttributeList", "gccAttribute", "nestedParenthesesBlock", "pointer", 
		"typeQualifierList", "parameterTypeList", "parameterList", "parameterDeclaration", 
		"parameterTypeSpecifier", "identifierList", "typeName", "abstractDeclarator", 
		"directAbstractDeclarator", "typedefName", "initializer", "initializerList", 
		"designation", "designatorList", "designator", "staticAssertDeclaration", 
		"statement", "labeledStatement", "compoundStatement", "blockItemList", 
		"blockItem", "expressionStatement", "selectionStatement", "iterationStatement", 
		"forCondition", "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
		"translationUnit", "externalDeclaration", "functionDefinition"
	};

	private static readonly string[] _LiteralNames = {
		null, "'__extension__'", "'__builtin_va_arg'", "'__builtin_offsetof'", 
		"'__bit'", "'__sbit'", "'__sfr'", "'__sfr16'", "'__sfr32'", "'__m128'", 
		"'__m128d'", "'__m128i'", "'__typeof__'", "'__inline__'", "'__stdcall'", 
		"'__declspec'", "'__cdecl'", "'__clrcall'", "'__fastcall'", "'__thiscall'", 
		"'__vectorcall'", "'__asm'", "'__asm__'", "'__attribute__'", "'__reentrant'", 
		"'__trap'", "'__critical'", "'__interrupt'", "'__using'", "'__at'", "'__wparam'", 
		"'__shadowregs'", "'__data'", "'__idata'", "'__pdata'", "'__xdata'", "'__code'", 
		"'__far'", "'__near'", "'__volatile__'", "'auto'", "'break'", "'case'", 
		"'char'", "'const'", "'continue'", "'default'", "'do'", "'double'", "'else'", 
		"'enum'", "'extern'", "'float'", "'for'", "'goto'", "'if'", "'inline'", 
		"'int'", "'long'", "'register'", "'restrict'", "'return'", "'short'", 
		"'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", "'typedef'", 
		"'union'", "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
		"'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'", 
		"'_Noreturn'", "'_Static_assert'", "'_Thread_local'", "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", 
		"'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", 
		"'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
		"'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", "'=='", 
		"'!='", "'->'", "'.'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "Auto", "Break", "Case", "Char", "Const", "Continue", 
		"Default", "Do", "Double", "Else", "Enum", "Extern", "Float", "For", "Goto", 
		"If", "Inline", "Int", "Long", "Register", "Restrict", "Return", "Short", 
		"Signed", "Sizeof", "Static", "Struct", "Switch", "Typedef", "Union", 
		"Unsigned", "Void", "Volatile", "While", "Alignas", "Alignof", "Atomic", 
		"Bool", "Complex", "Generic", "Imaginary", "Noreturn", "StaticAssert", 
		"ThreadLocal", "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
		"LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
		"LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
		"Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", "Tilde", 
		"Question", "Colon", "Semi", "Comma", "Assign", "StarAssign", "DivAssign", 
		"ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
		"AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", "Arrow", "Dot", 
		"Ellipsis", "Identifier", "Constant", "DigitSequence", "StringLiteral", 
		"ComplexDefine", "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
		"LineDirective", "PragmaDirective", "Whitespace", "Newline", "BlockComment", 
		"LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sdcc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SdccParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SdccParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SdccParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(SdccParser.Constant, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(SdccParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(SdccParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericSelectionContext genericSelection() {
			return GetRuleContext<GenericSelectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_primaryExpression);
		int _la;
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				Match(Constant);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 178;
					Match(StringLiteral);
					}
					}
					State = 181;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==StringLiteral );
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				Match(LeftParen);
				State = 184;
				expression();
				State = 185;
				Match(RightParen);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				genericSelection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 188;
					Match(T__0);
					}
				}

				State = 191;
				Match(LeftParen);
				State = 192;
				compoundStatement();
				State = 193;
				Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 195;
				Match(T__1);
				State = 196;
				Match(LeftParen);
				State = 197;
				unaryExpression();
				State = 198;
				Match(Comma);
				State = 199;
				typeName();
				State = 200;
				Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 202;
				Match(T__2);
				State = 203;
				Match(LeftParen);
				State = 204;
				typeName();
				State = 205;
				Match(Comma);
				State = 206;
				unaryExpression();
				State = 207;
				Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericSelectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Generic() { return GetToken(SdccParser.Generic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssocListContext genericAssocList() {
			return GetRuleContext<GenericAssocListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		public GenericSelectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericSelection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGenericSelection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGenericSelection(this);
		}
	}

	[RuleVersion(0)]
	public GenericSelectionContext genericSelection() {
		GenericSelectionContext _localctx = new GenericSelectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_genericSelection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			Match(Generic);
			State = 212;
			Match(LeftParen);
			State = 213;
			assignmentExpression();
			State = 214;
			Match(Comma);
			State = 215;
			genericAssocList();
			State = 216;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssocListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssociationContext[] genericAssociation() {
			return GetRuleContexts<GenericAssociationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericAssociationContext genericAssociation(int i) {
			return GetRuleContext<GenericAssociationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public GenericAssocListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssocList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGenericAssocList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGenericAssocList(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssocListContext genericAssocList() {
		GenericAssocListContext _localctx = new GenericAssocListContext(Context, State);
		EnterRule(_localctx, 4, RULE_genericAssocList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			genericAssociation();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 219;
				Match(Comma);
				State = 220;
				genericAssociation();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericAssociationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SdccParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(SdccParser.Default, 0); }
		public GenericAssociationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericAssociation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGenericAssociation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGenericAssociation(this);
		}
	}

	[RuleVersion(0)]
	public GenericAssociationContext genericAssociation() {
		GenericAssociationContext _localctx = new GenericAssociationContext(Context, State);
		EnterRule(_localctx, 6, RULE_genericAssociation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case Char:
			case Const:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Restrict:
			case Short:
			case Signed:
			case Struct:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Atomic:
			case Bool:
			case Complex:
			case Identifier:
				{
				State = 226;
				typeName();
				}
				break;
			case Default:
				{
				State = 227;
				Match(Default);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 230;
			Match(Colon);
			State = 231;
			assignmentExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(SdccParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(SdccParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(SdccParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(SdccParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(SdccParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(SdccParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftBracket() { return GetTokens(SdccParser.LeftBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket(int i) {
			return GetToken(SdccParser.LeftBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightBracket() { return GetTokens(SdccParser.RightBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket(int i) {
			return GetToken(SdccParser.RightBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SdccParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SdccParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dot() { return GetTokens(SdccParser.Dot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot(int i) {
			return GetToken(SdccParser.Dot, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Arrow() { return GetTokens(SdccParser.Arrow); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow(int i) {
			return GetToken(SdccParser.Arrow, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(SdccParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(SdccParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(SdccParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(SdccParser.MinusMinus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext[] argumentExpressionList() {
			return GetRuleContexts<ArgumentExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext argumentExpressionList(int i) {
			return GetRuleContext<ArgumentExpressionListContext>(i);
		}
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext postfixExpression() {
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_postfixExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 233;
				primaryExpression();
				}
				break;
			case 2:
				{
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 234;
					Match(T__0);
					}
				}

				State = 237;
				Match(LeftParen);
				State = 238;
				typeName();
				State = 239;
				Match(RightParen);
				State = 240;
				Match(LeftBrace);
				State = 241;
				initializerList();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 242;
					Match(Comma);
					}
				}

				State = 245;
				Match(RightBrace);
				}
				break;
			}
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (LeftParen - 84)) | (1L << (LeftBracket - 84)) | (1L << (PlusPlus - 84)) | (1L << (MinusMinus - 84)) | (1L << (Arrow - 84)) | (1L << (Dot - 84)))) != 0)) {
				{
				State = 261;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LeftBracket:
					{
					State = 249;
					Match(LeftBracket);
					State = 250;
					expression();
					State = 251;
					Match(RightBracket);
					}
					break;
				case LeftParen:
					{
					State = 253;
					Match(LeftParen);
					State = 255;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
						{
						State = 254;
						argumentExpressionList();
						}
					}

					State = 257;
					Match(RightParen);
					}
					break;
				case Arrow:
				case Dot:
					{
					State = 258;
					_la = TokenStream.LA(1);
					if ( !(_la==Arrow || _la==Dot) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 259;
					Match(Identifier);
					}
					break;
				case PlusPlus:
				case MinusMinus:
					{
					State = 260;
					_la = TokenStream.LA(1);
					if ( !(_la==PlusPlus || _la==MinusMinus) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public ArgumentExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterArgumentExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitArgumentExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExpressionListContext argumentExpressionList() {
		ArgumentExpressionListContext _localctx = new ArgumentExpressionListContext(Context, State);
		EnterRule(_localctx, 10, RULE_argumentExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			assignmentExpression();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 267;
				Match(Comma);
				State = 268;
				assignmentExpression();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd() { return GetToken(SdccParser.AndAnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sizeof() { return GetTokens(SdccParser.Sizeof); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sizeof(int i) {
			return GetToken(SdccParser.Sizeof, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignof() { return GetToken(SdccParser.Alignof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PlusPlus() { return GetTokens(SdccParser.PlusPlus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus(int i) {
			return GetToken(SdccParser.PlusPlus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MinusMinus() { return GetTokens(SdccParser.MinusMinus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus(int i) {
			return GetToken(SdccParser.MinusMinus, i);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext unaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_unaryExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 274;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Sizeof - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case Generic:
			case LeftParen:
			case Identifier:
			case Constant:
			case StringLiteral:
				{
				State = 280;
				postfixExpression();
				}
				break;
			case Plus:
			case Minus:
			case Star:
			case And:
			case Not:
			case Tilde:
				{
				State = 281;
				unaryOperator();
				State = 282;
				castExpression();
				}
				break;
			case Sizeof:
			case Alignof:
				{
				State = 284;
				_la = TokenStream.LA(1);
				if ( !(_la==Sizeof || _la==Alignof) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 285;
				Match(LeftParen);
				State = 286;
				typeName();
				State = 287;
				Match(RightParen);
				}
				break;
			case AndAnd:
				{
				State = 289;
				Match(AndAnd);
				State = 290;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SdccParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(SdccParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(SdccParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(SdccParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(SdccParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(SdccParser.Not, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 96)) & ~0x3f) == 0 && ((1L << (_la - 96)) & ((1L << (Plus - 96)) | (1L << (Minus - 96)) | (1L << (Star - 96)) | (1L << (And - 96)) | (1L << (Not - 96)) | (1L << (Tilde - 96)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(SdccParser.DigitSequence, 0); }
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_castExpression);
		int _la;
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 295;
					Match(T__0);
					}
				}

				State = 298;
				Match(LeftParen);
				State = 299;
				typeName();
				State = 300;
				Match(RightParen);
				State = 301;
				castExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				unaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 304;
				Match(DigitSequence);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext[] castExpression() {
			return GetRuleContexts<CastExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression(int i) {
			return GetRuleContext<CastExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(SdccParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(SdccParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Div() { return GetTokens(SdccParser.Div); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Div(int i) {
			return GetToken(SdccParser.Div, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Mod() { return GetTokens(SdccParser.Mod); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Mod(int i) {
			return GetToken(SdccParser.Mod, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext multiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiplicativeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			castExpression();
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Star - 100)) | (1L << (Div - 100)) | (1L << (Mod - 100)))) != 0)) {
				{
				{
				State = 308;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (Star - 100)) | (1L << (Div - 100)) | (1L << (Mod - 100)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 309;
				castExpression();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(SdccParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(SdccParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(SdccParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(SdccParser.Minus, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext additiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_additiveExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			multiplicativeExpression();
			State = 320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 316;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 317;
				multiplicativeExpression();
				}
				}
				State = 322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftShift() { return GetTokens(SdccParser.LeftShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift(int i) {
			return GetToken(SdccParser.LeftShift, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightShift() { return GetTokens(SdccParser.RightShift); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift(int i) {
			return GetToken(SdccParser.RightShift, i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext shiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_shiftExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			additiveExpression();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LeftShift || _la==RightShift) {
				{
				{
				State = 324;
				_la = TokenStream.LA(1);
				if ( !(_la==LeftShift || _la==RightShift) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 325;
				additiveExpression();
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Less() { return GetTokens(SdccParser.Less); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less(int i) {
			return GetToken(SdccParser.Less, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Greater() { return GetTokens(SdccParser.Greater); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater(int i) {
			return GetToken(SdccParser.Greater, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LessEqual() { return GetTokens(SdccParser.LessEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessEqual(int i) {
			return GetToken(SdccParser.LessEqual, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GreaterEqual() { return GetTokens(SdccParser.GreaterEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterEqual(int i) {
			return GetToken(SdccParser.GreaterEqual, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			shiftExpression();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (Less - 90)) | (1L << (LessEqual - 90)) | (1L << (Greater - 90)) | (1L << (GreaterEqual - 90)))) != 0)) {
				{
				{
				State = 332;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (Less - 90)) | (1L << (LessEqual - 90)) | (1L << (Greater - 90)) | (1L << (GreaterEqual - 90)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 333;
				shiftExpression();
				}
				}
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Equal() { return GetTokens(SdccParser.Equal); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal(int i) {
			return GetToken(SdccParser.Equal, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NotEqual() { return GetTokens(SdccParser.NotEqual); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual(int i) {
			return GetToken(SdccParser.NotEqual, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext equalityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			relationalExpression();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Equal || _la==NotEqual) {
				{
				{
				State = 340;
				_la = TokenStream.LA(1);
				if ( !(_la==Equal || _la==NotEqual) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 341;
				relationalExpression();
				}
				}
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(SdccParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(SdccParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			equalityExpression();
			State = 352;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==And) {
				{
				{
				State = 348;
				Match(And);
				State = 349;
				equalityExpression();
				}
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(SdccParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(SdccParser.Caret, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext exclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_exclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			andExpression();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Caret) {
				{
				{
				State = 356;
				Match(Caret);
				State = 357;
				andExpression();
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(SdccParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(SdccParser.Or, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext inclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			exclusiveOrExpression();
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Or) {
				{
				{
				State = 364;
				Match(Or);
				State = 365;
				exclusiveOrExpression();
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AndAnd() { return GetTokens(SdccParser.AndAnd); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAnd(int i) {
			return GetToken(SdccParser.AndAnd, i);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext logicalAndExpression() {
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_logicalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			inclusiveOrExpression();
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AndAnd) {
				{
				{
				State = 372;
				Match(AndAnd);
				State = 373;
				inclusiveOrExpression();
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext[] logicalAndExpression() {
			return GetRuleContexts<LogicalAndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalAndExpressionContext logicalAndExpression(int i) {
			return GetRuleContext<LogicalAndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OrOr() { return GetTokens(SdccParser.OrOr); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrOr(int i) {
			return GetToken(SdccParser.OrOr, i);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext logicalOrExpression() {
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_logicalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			logicalAndExpression();
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OrOr) {
				{
				{
				State = 380;
				Match(OrOr);
				State = 381;
				logicalAndExpression();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Question() { return GetToken(SdccParser.Question, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SdccParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext conditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_conditionalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			logicalOrExpression();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Question) {
				{
				State = 388;
				Match(Question);
				State = 389;
				expression();
				State = 390;
				Match(Colon);
				State = 391;
				conditionalExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(SdccParser.DigitSequence, 0); }
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignmentExpression);
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 395;
				conditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 396;
				unaryExpression();
				State = 397;
				assignmentOperator();
				State = 398;
				assignmentExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 400;
				Match(DigitSequence);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdccParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StarAssign() { return GetToken(SdccParser.StarAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivAssign() { return GetToken(SdccParser.DivAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModAssign() { return GetToken(SdccParser.ModAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusAssign() { return GetToken(SdccParser.PlusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusAssign() { return GetToken(SdccParser.MinusAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShiftAssign() { return GetToken(SdccParser.LeftShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShiftAssign() { return GetToken(SdccParser.RightShiftAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AndAssign() { return GetToken(SdccParser.AndAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XorAssign() { return GetToken(SdccParser.XorAssign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OrAssign() { return GetToken(SdccParser.OrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (Assign - 114)) | (1L << (StarAssign - 114)) | (1L << (DivAssign - 114)) | (1L << (ModAssign - 114)) | (1L << (PlusAssign - 114)) | (1L << (MinusAssign - 114)) | (1L << (LeftShiftAssign - 114)) | (1L << (RightShiftAssign - 114)) | (1L << (AndAssign - 114)) | (1L << (XorAssign - 114)) | (1L << (OrAssign - 114)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			assignmentExpression();
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 406;
				Match(Comma);
				State = 407;
				assignmentExpression();
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			conditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			declarationSpecifiers();
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (LeftParen - 84)) | (1L << (Star - 84)) | (1L << (Caret - 84)) | (1L << (Identifier - 84)))) != 0)) {
				{
				State = 416;
				initDeclaratorList();
				}
			}

			State = 419;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiersContext declarationSpecifiers() {
		DeclarationSpecifiersContext _localctx = new DeclarationSpecifiersContext(Context, State);
		EnterRule(_localctx, 50, RULE_declarationSpecifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 421;
					declarationSpecifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 424;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifiers2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext[] declarationSpecifier() {
			return GetRuleContexts<DeclarationSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifierContext declarationSpecifier(int i) {
			return GetRuleContext<DeclarationSpecifierContext>(i);
		}
		public DeclarationSpecifiers2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifiers2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifiers2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifiers2(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifiers2Context declarationSpecifiers2() {
		DeclarationSpecifiers2Context _localctx = new DeclarationSpecifiers2Context(Context, State);
		EnterRule(_localctx, 52, RULE_declarationSpecifiers2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 426;
				declarationSpecifier();
				}
				}
				State = 429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static - 65)) | (1L << (Struct - 65)) | (1L << (Typedef - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Alignas - 65)) | (1L << (Atomic - 65)) | (1L << (Bool - 65)) | (1L << (Complex - 65)) | (1L << (Noreturn - 65)) | (1L << (ThreadLocal - 65)))) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSpecifierContext functionSpecifier() {
			return GetRuleContext<FunctionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlignmentSpecifierContext alignmentSpecifier() {
			return GetRuleContext<AlignmentSpecifierContext>(0);
		}
		public DeclarationSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDeclarationSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDeclarationSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSpecifierContext declarationSpecifier() {
		DeclarationSpecifierContext _localctx = new DeclarationSpecifierContext(Context, State);
		EnterRule(_localctx, 54, RULE_declarationSpecifier);
		try {
			State = 436;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 431;
				storageClassSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 432;
				typeSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 433;
				typeQualifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 434;
				functionSpecifier();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 435;
				alignmentSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext[] initDeclarator() {
			return GetRuleContexts<InitDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorContext initDeclarator(int i) {
			return GetRuleContext<InitDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext initDeclaratorList() {
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, State);
		EnterRule(_localctx, 56, RULE_initDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			initDeclarator();
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 439;
				Match(Comma);
				State = 440;
				initDeclarator();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdccParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext initDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 58, RULE_initDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446;
			declarator();
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 447;
				Match(Assign);
				State = 448;
				initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Typedef() { return GetToken(SdccParser.Typedef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Extern() { return GetToken(SdccParser.Extern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(SdccParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ThreadLocal() { return GetToken(SdccParser.ThreadLocal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Auto() { return GetToken(SdccParser.Auto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Register() { return GetToken(SdccParser.Register, 0); }
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext storageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 40)) & ~0x3f) == 0 && ((1L << (_la - 40)) & ((1L << (Auto - 40)) | (1L << (Extern - 40)) | (1L << (Register - 40)) | (1L << (Static - 40)) | (1L << (Typedef - 40)) | (1L << (ThreadLocal - 40)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(SdccParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(SdccParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(SdccParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(SdccParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(SdccParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(SdccParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(SdccParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(SdccParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(SdccParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(SdccParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Complex() { return GetToken(SdccParser.Complex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomicTypeSpecifierContext atomicTypeSpecifier() {
			return GetRuleContext<AtomicTypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionSpecifierContext structOrUnionSpecifier() {
			return GetRuleContext<StructOrUnionSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeSpecifier);
		int _la;
		try {
			State = 467;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
			case Complex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (Unsigned - 70)) | (1L << (Void - 70)) | (1L << (Bool - 70)) | (1L << (Complex - 70)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				Match(T__0);
				State = 455;
				Match(LeftParen);
				State = 456;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 457;
				Match(RightParen);
				}
				break;
			case Atomic:
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				atomicTypeSpecifier();
				}
				break;
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 4);
				{
				State = 459;
				structOrUnionSpecifier();
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 5);
				{
				State = 460;
				enumSpecifier();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 6);
				{
				State = 461;
				typedefName();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 7);
				{
				State = 462;
				Match(T__11);
				State = 463;
				Match(LeftParen);
				State = 464;
				constantExpression();
				State = 465;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(SdccParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationListContext structDeclarationList() {
			return GetRuleContext<StructDeclarationListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(SdccParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		public StructOrUnionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStructOrUnionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStructOrUnionSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionSpecifierContext structOrUnionSpecifier() {
		StructOrUnionSpecifierContext _localctx = new StructOrUnionSpecifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_structOrUnionSpecifier);
		int _la;
		try {
			State = 480;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 469;
				structOrUnion();
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 470;
					Match(Identifier);
					}
				}

				State = 473;
				Match(LeftBrace);
				State = 474;
				structDeclarationList();
				State = 475;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477;
				structOrUnion();
				State = 478;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructOrUnionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(SdccParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Union() { return GetToken(SdccParser.Union, 0); }
		public StructOrUnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structOrUnion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStructOrUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStructOrUnion(this);
		}
	}

	[RuleVersion(0)]
	public StructOrUnionContext structOrUnion() {
		StructOrUnionContext _localctx = new StructOrUnionContext(Context, State);
		EnterRule(_localctx, 66, RULE_structOrUnion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			_la = TokenStream.LA(1);
			if ( !(_la==Struct || _la==Union) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext[] structDeclaration() {
			return GetRuleContexts<StructDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclarationContext structDeclaration(int i) {
			return GetRuleContext<StructDeclarationContext>(i);
		}
		public StructDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStructDeclarationList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStructDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationListContext structDeclarationList() {
		StructDeclarationListContext _localctx = new StructDeclarationListContext(Context, State);
		EnterRule(_localctx, 68, RULE_structDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 484;
				structDeclaration();
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Restrict) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Struct - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Atomic - 66)) | (1L << (Bool - 66)) | (1L << (Complex - 66)) | (1L << (StaticAssert - 66)))) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorListContext structDeclaratorList() {
			return GetRuleContext<StructDeclaratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public StructDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStructDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStructDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclarationContext structDeclaration() {
		StructDeclarationContext _localctx = new StructDeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_structDeclaration);
		try {
			State = 497;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 489;
				specifierQualifierList();
				State = 490;
				structDeclaratorList();
				State = 491;
				Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 493;
				specifierQualifierList();
				State = 494;
				Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 496;
				staticAssertDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecifierQualifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier() {
			return GetRuleContext<TypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		public SpecifierQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specifierQualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterSpecifierQualifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitSpecifierQualifierList(this);
		}
	}

	[RuleVersion(0)]
	public SpecifierQualifierListContext specifierQualifierList() {
		SpecifierQualifierListContext _localctx = new SpecifierQualifierListContext(Context, State);
		EnterRule(_localctx, 72, RULE_specifierQualifierList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 499;
				typeSpecifier();
				}
				break;
			case 2:
				{
				State = 500;
				typeQualifier();
				}
				break;
			}
			State = 504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 503;
				specifierQualifierList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorContext[] structDeclarator() {
			return GetRuleContexts<StructDeclaratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDeclaratorContext structDeclarator(int i) {
			return GetRuleContext<StructDeclaratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public StructDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclaratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStructDeclaratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStructDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorListContext structDeclaratorList() {
		StructDeclaratorListContext _localctx = new StructDeclaratorListContext(Context, State);
		EnterRule(_localctx, 74, RULE_structDeclaratorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			structDeclarator();
			State = 511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 507;
				Match(Comma);
				State = 508;
				structDeclarator();
				}
				}
				State = 513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SdccParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public StructDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStructDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStructDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public StructDeclaratorContext structDeclarator() {
		StructDeclaratorContext _localctx = new StructDeclaratorContext(Context, State);
		EnterRule(_localctx, 76, RULE_structDeclarator);
		int _la;
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 514;
				declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (LeftParen - 84)) | (1L << (Star - 84)) | (1L << (Caret - 84)) | (1L << (Identifier - 84)))) != 0)) {
					{
					State = 515;
					declarator();
					}
				}

				State = 518;
				Match(Colon);
				State = 519;
				constantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(SdccParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(SdccParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(SdccParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext enumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 78, RULE_enumSpecifier);
		int _la;
		try {
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522;
				Match(Enum);
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 523;
					Match(Identifier);
					}
				}

				State = 526;
				Match(LeftBrace);
				State = 527;
				enumeratorList();
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 528;
					Match(Comma);
					}
				}

				State = 531;
				Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 533;
				Match(Enum);
				State = 534;
				Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext[] enumerator() {
			return GetRuleContexts<EnumeratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorContext enumerator(int i) {
			return GetRuleContext<EnumeratorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext enumeratorList() {
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, State);
		EnterRule(_localctx, 80, RULE_enumeratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			enumerator();
			State = 542;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 538;
					Match(Comma);
					State = 539;
					enumerator();
					}
					} 
				}
				State = 544;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationConstantContext enumerationConstant() {
			return GetRuleContext<EnumerationConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdccParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 82, RULE_enumerator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545;
			enumerationConstant();
			State = 548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 546;
				Match(Assign);
				State = 547;
				constantExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		public EnumerationConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterEnumerationConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitEnumerationConstant(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationConstantContext enumerationConstant() {
		EnumerationConstantContext _localctx = new EnumerationConstantContext(Context, State);
		EnterRule(_localctx, 84, RULE_enumerationConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 550;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomicTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(SdccParser.Atomic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		public AtomicTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomicTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAtomicTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAtomicTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public AtomicTypeSpecifierContext atomicTypeSpecifier() {
		AtomicTypeSpecifierContext _localctx = new AtomicTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 86, RULE_atomicTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(Atomic);
			State = 553;
			Match(LeftParen);
			State = 554;
			typeName();
			State = 555;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Const() { return GetToken(SdccParser.Const, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Restrict() { return GetToken(SdccParser.Restrict, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(SdccParser.Volatile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(SdccParser.Atomic, 0); }
		public TypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterTypeQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitTypeQualifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierContext typeQualifier() {
		TypeQualifierContext _localctx = new TypeQualifierContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Inline() { return GetToken(SdccParser.Inline, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Noreturn() { return GetToken(SdccParser.Noreturn, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeSpecifierContext gccAttributeSpecifier() {
			return GetRuleContext<GccAttributeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		public FunctionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterFunctionSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitFunctionSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSpecifierContext functionSpecifier() {
		FunctionSpecifierContext _localctx = new FunctionSpecifierContext(Context, State);
		EnterRule(_localctx, 90, RULE_functionSpecifier);
		int _la;
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__13:
			case Inline:
			case Noreturn:
				EnterOuterAlt(_localctx, 1);
				{
				State = 559;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << Inline))) != 0) || _la==Noreturn) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 560;
				gccAttributeSpecifier();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 561;
				Match(T__14);
				State = 562;
				Match(LeftParen);
				State = 563;
				Match(Identifier);
				State = 564;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Alignas() { return GetToken(SdccParser.Alignas, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public AlignmentSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAlignmentSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAlignmentSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentSpecifierContext alignmentSpecifier() {
		AlignmentSpecifierContext _localctx = new AlignmentSpecifierContext(Context, State);
		EnterRule(_localctx, 92, RULE_alignmentSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			Match(Alignas);
			State = 568;
			Match(LeftParen);
			State = 571;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 569;
				typeName();
				}
				break;
			case 2:
				{
				State = 570;
				constantExpression();
				}
				break;
			}
			State = 573;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 94, RULE_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Star || _la==Caret) {
				{
				State = 575;
				pointer();
				}
			}

			State = 578;
			directDeclarator(0);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) {
				{
				{
				State = 579;
				gccDeclaratorExtension();
				}
				}
				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SdccParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DigitSequence() { return GetToken(SdccParser.DigitSequence, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcSpecificModiferContext vcSpecificModifer() {
			return GetRuleContext<VcSpecificModiferContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectDeclaratorContext directDeclarator() {
			return GetRuleContext<DirectDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(SdccParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(SdccParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(SdccParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(SdccParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public DirectDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDirectDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDirectDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DirectDeclaratorContext directDeclarator() {
		return directDeclarator(0);
	}

	private DirectDeclaratorContext directDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectDeclaratorContext _localctx = new DirectDeclaratorContext(Context, _parentState);
		DirectDeclaratorContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_directDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 586;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 587;
				Match(LeftParen);
				State = 588;
				declarator();
				State = 589;
				Match(RightParen);
				}
				break;
			case 3:
				{
				State = 591;
				Match(Identifier);
				State = 592;
				Match(Colon);
				State = 593;
				Match(DigitSequence);
				}
				break;
			case 4:
				{
				State = 594;
				vcSpecificModifer();
				State = 595;
				Match(Identifier);
				}
				break;
			case 5:
				{
				State = 597;
				Match(LeftParen);
				State = 598;
				vcSpecificModifer();
				State = 599;
				declarator();
				State = 600;
				Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 647;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 604;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 605;
						Match(LeftBracket);
						State = 607;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
							{
							State = 606;
							typeQualifierList();
							}
						}

						State = 610;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
							{
							State = 609;
							assignmentExpression();
							}
						}

						State = 612;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 613;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 614;
						Match(LeftBracket);
						State = 615;
						Match(Static);
						State = 617;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
							{
							State = 616;
							typeQualifierList();
							}
						}

						State = 619;
						assignmentExpression();
						State = 620;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 622;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 623;
						Match(LeftBracket);
						State = 624;
						typeQualifierList();
						State = 625;
						Match(Static);
						State = 626;
						assignmentExpression();
						State = 627;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 629;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 630;
						Match(LeftBracket);
						State = 632;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
							{
							State = 631;
							typeQualifierList();
							}
						}

						State = 634;
						Match(Star);
						State = 635;
						Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 636;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 637;
						Match(LeftParen);
						State = 638;
						parameterTypeList();
						State = 639;
						Match(RightParen);
						}
						break;
					case 6:
						{
						_localctx = new DirectDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directDeclarator);
						State = 641;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 642;
						Match(LeftParen);
						State = 644;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Identifier) {
							{
							State = 643;
							identifierList();
							}
						}

						State = 646;
						Match(RightParen);
						}
						break;
					}
					} 
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VcSpecificModiferContext : ParserRuleContext {
		public VcSpecificModiferContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcSpecificModifer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterVcSpecificModifer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitVcSpecificModifer(this);
		}
	}

	[RuleVersion(0)]
	public VcSpecificModiferContext vcSpecificModifer() {
		VcSpecificModiferContext _localctx = new VcSpecificModiferContext(Context, State);
		EnterRule(_localctx, 98, RULE_vcSpecificModifer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccDeclaratorExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(SdccParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(SdccParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeSpecifierContext gccAttributeSpecifier() {
			return GetRuleContext<GccAttributeSpecifierContext>(0);
		}
		public GccDeclaratorExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccDeclaratorExtension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGccDeclaratorExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGccDeclaratorExtension(this);
		}
	}

	[RuleVersion(0)]
	public GccDeclaratorExtensionContext gccDeclaratorExtension() {
		GccDeclaratorExtensionContext _localctx = new GccDeclaratorExtensionContext(Context, State);
		EnterRule(_localctx, 100, RULE_gccDeclaratorExtension);
		int _la;
		try {
			State = 663;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 655;
				Match(LeftParen);
				State = 657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 656;
					Match(StringLiteral);
					}
					}
					State = 659;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==StringLiteral );
				State = 661;
				Match(RightParen);
				}
				break;
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
				EnterOuterAlt(_localctx, 2);
				{
				State = 662;
				gccAttributeSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(SdccParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(SdccParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeListContext gccAttributeList() {
			return GetRuleContext<GccAttributeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(SdccParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(SdccParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Constant() { return GetToken(SdccParser.Constant, 0); }
		public GccAttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttributeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGccAttributeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGccAttributeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeSpecifierContext gccAttributeSpecifier() {
		GccAttributeSpecifierContext _localctx = new GccAttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 102, RULE_gccAttributeSpecifier);
		int _la;
		try {
			State = 681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665;
				Match(T__22);
				State = 666;
				Match(LeftParen);
				State = 667;
				Match(LeftParen);
				State = 668;
				gccAttributeList();
				State = 669;
				Match(RightParen);
				State = 670;
				Match(RightParen);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 672;
				Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 673;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 674;
				Match(T__25);
				}
				break;
			case T__26:
			case T__27:
			case T__28:
				EnterOuterAlt(_localctx, 5);
				{
				State = 675;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__26) | (1L << T__27) | (1L << T__28))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 676;
				Match(LeftParen);
				State = 677;
				Match(Constant);
				State = 678;
				Match(RightParen);
				}
				break;
			case T__29:
			case T__30:
				EnterOuterAlt(_localctx, 6);
				{
				State = 679;
				_la = TokenStream.LA(1);
				if ( !(_la==T__29 || _la==T__30) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
				EnterOuterAlt(_localctx, 7);
				{
				State = 680;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeContext[] gccAttribute() {
			return GetRuleContexts<GccAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccAttributeContext gccAttribute(int i) {
			return GetRuleContext<GccAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public GccAttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttributeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGccAttributeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGccAttributeList(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeListContext gccAttributeList() {
		GccAttributeListContext _localctx = new GccAttributeListContext(Context, State);
		EnterRule(_localctx, 104, RULE_gccAttributeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Else) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Return) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Sizeof - 64)) | (1L << (Static - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Typedef - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (While - 64)) | (1L << (Alignas - 64)) | (1L << (Alignof - 64)) | (1L << (Atomic - 64)) | (1L << (Bool - 64)) | (1L << (Complex - 64)) | (1L << (Generic - 64)) | (1L << (Imaginary - 64)) | (1L << (Noreturn - 64)) | (1L << (StaticAssert - 64)) | (1L << (ThreadLocal - 64)) | (1L << (LeftBracket - 64)) | (1L << (RightBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (RightBrace - 64)) | (1L << (Less - 64)) | (1L << (LessEqual - 64)) | (1L << (Greater - 64)) | (1L << (GreaterEqual - 64)) | (1L << (LeftShift - 64)) | (1L << (RightShift - 64)) | (1L << (Plus - 64)) | (1L << (PlusPlus - 64)) | (1L << (Minus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (Caret - 64)) | (1L << (Not - 64)) | (1L << (Tilde - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Semi - 64)) | (1L << (Assign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (Arrow - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Dot - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (Constant - 128)) | (1L << (DigitSequence - 128)) | (1L << (StringLiteral - 128)) | (1L << (ComplexDefine - 128)) | (1L << (IncludeDirective - 128)) | (1L << (AsmBlock - 128)) | (1L << (LineAfterPreprocessing - 128)) | (1L << (LineDirective - 128)) | (1L << (PragmaDirective - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0)) {
				{
				State = 683;
				gccAttribute();
				}
			}

			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 686;
				Match(Comma);
				State = 688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Else) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Return) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Sizeof - 64)) | (1L << (Static - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Typedef - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (While - 64)) | (1L << (Alignas - 64)) | (1L << (Alignof - 64)) | (1L << (Atomic - 64)) | (1L << (Bool - 64)) | (1L << (Complex - 64)) | (1L << (Generic - 64)) | (1L << (Imaginary - 64)) | (1L << (Noreturn - 64)) | (1L << (StaticAssert - 64)) | (1L << (ThreadLocal - 64)) | (1L << (LeftBracket - 64)) | (1L << (RightBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (RightBrace - 64)) | (1L << (Less - 64)) | (1L << (LessEqual - 64)) | (1L << (Greater - 64)) | (1L << (GreaterEqual - 64)) | (1L << (LeftShift - 64)) | (1L << (RightShift - 64)) | (1L << (Plus - 64)) | (1L << (PlusPlus - 64)) | (1L << (Minus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (Caret - 64)) | (1L << (Not - 64)) | (1L << (Tilde - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Semi - 64)) | (1L << (Assign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (Arrow - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Dot - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (Constant - 128)) | (1L << (DigitSequence - 128)) | (1L << (StringLiteral - 128)) | (1L << (ComplexDefine - 128)) | (1L << (IncludeDirective - 128)) | (1L << (AsmBlock - 128)) | (1L << (LineAfterPreprocessing - 128)) | (1L << (LineDirective - 128)) | (1L << (PragmaDirective - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0)) {
					{
					State = 687;
					gccAttribute();
					}
				}

				}
				}
				State = 694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GccAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(SdccParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(SdccParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(SdccParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(SdccParser.RightParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExpressionListContext argumentExpressionList() {
			return GetRuleContext<ArgumentExpressionListContext>(0);
		}
		public GccAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gccAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterGccAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitGccAttribute(this);
		}
	}

	[RuleVersion(0)]
	public GccAttributeContext gccAttribute() {
		GccAttributeContext _localctx = new GccAttributeContext(Context, State);
		EnterRule(_localctx, 106, RULE_gccAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			_la = TokenStream.LA(1);
			if ( _la <= 0 || (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (LeftParen - 84)) | (1L << (RightParen - 84)) | (1L << (Comma - 84)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 696;
				Match(LeftParen);
				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
					{
					State = 697;
					argumentExpressionList();
					}
				}

				State = 700;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedParenthesesBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LeftParen() { return GetTokens(SdccParser.LeftParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen(int i) {
			return GetToken(SdccParser.LeftParen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedParenthesesBlockContext[] nestedParenthesesBlock() {
			return GetRuleContexts<NestedParenthesesBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedParenthesesBlockContext nestedParenthesesBlock(int i) {
			return GetRuleContext<NestedParenthesesBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RightParen() { return GetTokens(SdccParser.RightParen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen(int i) {
			return GetToken(SdccParser.RightParen, i);
		}
		public NestedParenthesesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedParenthesesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterNestedParenthesesBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitNestedParenthesesBlock(this);
		}
	}

	[RuleVersion(0)]
	public NestedParenthesesBlockContext nestedParenthesesBlock() {
		NestedParenthesesBlockContext _localctx = new NestedParenthesesBlockContext(Context, State);
		EnterRule(_localctx, 108, RULE_nestedParenthesesBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Else) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Return) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Sizeof - 64)) | (1L << (Static - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Typedef - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (While - 64)) | (1L << (Alignas - 64)) | (1L << (Alignof - 64)) | (1L << (Atomic - 64)) | (1L << (Bool - 64)) | (1L << (Complex - 64)) | (1L << (Generic - 64)) | (1L << (Imaginary - 64)) | (1L << (Noreturn - 64)) | (1L << (StaticAssert - 64)) | (1L << (ThreadLocal - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (RightBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (RightBrace - 64)) | (1L << (Less - 64)) | (1L << (LessEqual - 64)) | (1L << (Greater - 64)) | (1L << (GreaterEqual - 64)) | (1L << (LeftShift - 64)) | (1L << (RightShift - 64)) | (1L << (Plus - 64)) | (1L << (PlusPlus - 64)) | (1L << (Minus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Star - 64)) | (1L << (Div - 64)) | (1L << (Mod - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (AndAnd - 64)) | (1L << (OrOr - 64)) | (1L << (Caret - 64)) | (1L << (Not - 64)) | (1L << (Tilde - 64)) | (1L << (Question - 64)) | (1L << (Colon - 64)) | (1L << (Semi - 64)) | (1L << (Comma - 64)) | (1L << (Assign - 64)) | (1L << (StarAssign - 64)) | (1L << (DivAssign - 64)) | (1L << (ModAssign - 64)) | (1L << (PlusAssign - 64)) | (1L << (MinusAssign - 64)) | (1L << (LeftShiftAssign - 64)) | (1L << (RightShiftAssign - 64)) | (1L << (AndAssign - 64)) | (1L << (XorAssign - 64)) | (1L << (OrAssign - 64)) | (1L << (Equal - 64)) | (1L << (NotEqual - 64)) | (1L << (Arrow - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Dot - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (Constant - 128)) | (1L << (DigitSequence - 128)) | (1L << (StringLiteral - 128)) | (1L << (ComplexDefine - 128)) | (1L << (IncludeDirective - 128)) | (1L << (AsmBlock - 128)) | (1L << (LineAfterPreprocessing - 128)) | (1L << (LineDirective - 128)) | (1L << (PragmaDirective - 128)) | (1L << (Whitespace - 128)) | (1L << (Newline - 128)) | (1L << (BlockComment - 128)) | (1L << (LineComment - 128)))) != 0)) {
				{
				State = 708;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
				case T__1:
				case T__2:
				case T__3:
				case T__4:
				case T__5:
				case T__6:
				case T__7:
				case T__8:
				case T__9:
				case T__10:
				case T__11:
				case T__12:
				case T__13:
				case T__14:
				case T__15:
				case T__16:
				case T__17:
				case T__18:
				case T__19:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case T__26:
				case T__27:
				case T__28:
				case T__29:
				case T__30:
				case T__31:
				case T__32:
				case T__33:
				case T__34:
				case T__35:
				case T__36:
				case T__37:
				case T__38:
				case Auto:
				case Break:
				case Case:
				case Char:
				case Const:
				case Continue:
				case Default:
				case Do:
				case Double:
				case Else:
				case Enum:
				case Extern:
				case Float:
				case For:
				case Goto:
				case If:
				case Inline:
				case Int:
				case Long:
				case Register:
				case Restrict:
				case Return:
				case Short:
				case Signed:
				case Sizeof:
				case Static:
				case Struct:
				case Switch:
				case Typedef:
				case Union:
				case Unsigned:
				case Void:
				case Volatile:
				case While:
				case Alignas:
				case Alignof:
				case Atomic:
				case Bool:
				case Complex:
				case Generic:
				case Imaginary:
				case Noreturn:
				case StaticAssert:
				case ThreadLocal:
				case LeftBracket:
				case RightBracket:
				case LeftBrace:
				case RightBrace:
				case Less:
				case LessEqual:
				case Greater:
				case GreaterEqual:
				case LeftShift:
				case RightShift:
				case Plus:
				case PlusPlus:
				case Minus:
				case MinusMinus:
				case Star:
				case Div:
				case Mod:
				case And:
				case Or:
				case AndAnd:
				case OrOr:
				case Caret:
				case Not:
				case Tilde:
				case Question:
				case Colon:
				case Semi:
				case Comma:
				case Assign:
				case StarAssign:
				case DivAssign:
				case ModAssign:
				case PlusAssign:
				case MinusAssign:
				case LeftShiftAssign:
				case RightShiftAssign:
				case AndAssign:
				case XorAssign:
				case OrAssign:
				case Equal:
				case NotEqual:
				case Arrow:
				case Dot:
				case Ellipsis:
				case Identifier:
				case Constant:
				case DigitSequence:
				case StringLiteral:
				case ComplexDefine:
				case IncludeDirective:
				case AsmBlock:
				case LineAfterPreprocessing:
				case LineDirective:
				case PragmaDirective:
				case Whitespace:
				case Newline:
				case BlockComment:
				case LineComment:
					{
					State = 703;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==LeftParen || _la==RightParen) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LeftParen:
					{
					State = 704;
					Match(LeftParen);
					State = 705;
					nestedParenthesesBlock();
					State = 706;
					Match(RightParen);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Star() { return GetTokens(SdccParser.Star); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star(int i) {
			return GetToken(SdccParser.Star, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Caret() { return GetTokens(SdccParser.Caret); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Caret(int i) {
			return GetToken(SdccParser.Caret, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext[] typeQualifierList() {
			return GetRuleContexts<TypeQualifierListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList(int i) {
			return GetRuleContext<TypeQualifierListContext>(i);
		}
		public PointerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterPointer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitPointer(this);
		}
	}

	[RuleVersion(0)]
	public PointerContext pointer() {
		PointerContext _localctx = new PointerContext(Context, State);
		EnterRule(_localctx, 110, RULE_pointer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 713;
				_la = TokenStream.LA(1);
				if ( !(_la==Star || _la==Caret) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
					{
					State = 714;
					typeQualifierList();
					}
				}

				}
				}
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Star || _la==Caret );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeQualifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext[] typeQualifier() {
			return GetRuleContexts<TypeQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier(int i) {
			return GetRuleContext<TypeQualifierContext>(i);
		}
		public TypeQualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeQualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterTypeQualifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitTypeQualifierList(this);
		}
	}

	[RuleVersion(0)]
	public TypeQualifierListContext typeQualifierList() {
		TypeQualifierListContext _localctx = new TypeQualifierListContext(Context, State);
		EnterRule(_localctx, 112, RULE_typeQualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 721;
				typeQualifier();
				}
				}
				State = 724;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(SdccParser.Ellipsis, 0); }
		public ParameterTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterParameterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitParameterTypeList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeListContext parameterTypeList() {
		ParameterTypeListContext _localctx = new ParameterTypeListContext(Context, State);
		EnterRule(_localctx, 114, RULE_parameterTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726;
			parameterList();
			State = 729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 727;
				Match(Comma);
				State = 728;
				Match(Ellipsis);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 116, RULE_parameterList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			parameterDeclaration();
			State = 736;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 732;
					Match(Comma);
					State = 733;
					parameterDeclaration();
					}
					} 
				}
				State = 738;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,76,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext[] typeQualifier() {
			return GetRuleContexts<TypeQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierContext typeQualifier(int i) {
			return GetRuleContext<TypeQualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeSpecifierContext[] parameterTypeSpecifier() {
			return GetRuleContexts<ParameterTypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeSpecifierContext parameterTypeSpecifier(int i) {
			return GetRuleContext<ParameterTypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 118, RULE_parameterDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 741;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 741;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
					case 1:
						{
						State = 739;
						typeQualifier();
						}
						break;
					case 2:
						{
						State = 740;
						parameterTypeSpecifier();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,78,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 747;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 745;
				declarator();
				}
				break;
			case 2:
				{
				State = 746;
				abstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterTypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Void() { return GetToken(SdccParser.Void, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(SdccParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Short() { return GetToken(SdccParser.Short, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(SdccParser.Int, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Long() { return GetToken(SdccParser.Long, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(SdccParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(SdccParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Signed() { return GetToken(SdccParser.Signed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unsigned() { return GetToken(SdccParser.Unsigned, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(SdccParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Complex() { return GetToken(SdccParser.Complex, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Atomic() { return GetToken(SdccParser.Atomic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructOrUnionContext structOrUnion() {
			return GetRuleContext<StructOrUnionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Enum() { return GetToken(SdccParser.Enum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ParameterTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterTypeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterParameterTypeSpecifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitParameterTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public ParameterTypeSpecifierContext parameterTypeSpecifier() {
		ParameterTypeSpecifierContext _localctx = new ParameterTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 120, RULE_parameterTypeSpecifier);
		int _la;
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case Char:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Bool:
			case Complex:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << Char) | (1L << Double) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (Unsigned - 70)) | (1L << (Void - 70)) | (1L << (Bool - 70)) | (1L << (Complex - 70)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				Match(T__0);
				State = 751;
				Match(LeftParen);
				State = 752;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 753;
				Match(RightParen);
				}
				break;
			case Atomic:
				EnterOuterAlt(_localctx, 3);
				{
				State = 754;
				Match(Atomic);
				State = 755;
				Match(LeftParen);
				State = 756;
				typeName();
				State = 757;
				Match(RightParen);
				}
				break;
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 4);
				{
				State = 759;
				structOrUnion();
				State = 760;
				Match(Identifier);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 5);
				{
				State = 762;
				Match(Enum);
				State = 763;
				Match(Identifier);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 6);
				{
				State = 764;
				typedefName();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 7);
				{
				State = 765;
				Match(T__11);
				State = 766;
				Match(LeftParen);
				State = 767;
				constantExpression();
				State = 768;
				Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SdccParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SdccParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 122, RULE_identifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772;
			Match(Identifier);
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 773;
				Match(Comma);
				State = 774;
				Match(Identifier);
				}
				}
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecifierQualifierListContext specifierQualifierList() {
			return GetRuleContext<SpecifierQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			specifierQualifierList();
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (LeftParen - 84)) | (1L << (LeftBracket - 84)) | (1L << (Star - 84)) | (1L << (Caret - 84)))) != 0)) {
				{
				State = 781;
				abstractDeclarator();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointerContext pointer() {
			return GetRuleContext<PointerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectAbstractDeclaratorContext directAbstractDeclarator() {
			return GetRuleContext<DirectAbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext abstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 126, RULE_abstractDeclarator);
		int _la;
		try {
			State = 795;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 784;
				pointer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Star || _la==Caret) {
					{
					State = 785;
					pointer();
					}
				}

				State = 788;
				directAbstractDeclarator(0);
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37))) != 0)) {
					{
					{
					State = 789;
					gccDeclaratorExtension();
					}
					}
					State = 794;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectAbstractDeclaratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext[] gccDeclaratorExtension() {
			return GetRuleContexts<GccDeclaratorExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GccDeclaratorExtensionContext gccDeclaratorExtension(int i) {
			return GetRuleContext<GccDeclaratorExtensionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(SdccParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(SdccParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeQualifierListContext typeQualifierList() {
			return GetRuleContext<TypeQualifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Static() { return GetToken(SdccParser.Static, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(SdccParser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterTypeListContext parameterTypeList() {
			return GetRuleContext<ParameterTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectAbstractDeclaratorContext directAbstractDeclarator() {
			return GetRuleContext<DirectAbstractDeclaratorContext>(0);
		}
		public DirectAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directAbstractDeclarator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDirectAbstractDeclarator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDirectAbstractDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DirectAbstractDeclaratorContext directAbstractDeclarator() {
		return directAbstractDeclarator(0);
	}

	private DirectAbstractDeclaratorContext directAbstractDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DirectAbstractDeclaratorContext _localctx = new DirectAbstractDeclaratorContext(Context, _parentState);
		DirectAbstractDeclaratorContext _prevctx = _localctx;
		int _startState = 128;
		EnterRecursionRule(_localctx, 128, RULE_directAbstractDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				{
				State = 798;
				Match(LeftParen);
				State = 799;
				abstractDeclarator();
				State = 800;
				Match(RightParen);
				State = 804;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 801;
						gccDeclaratorExtension();
						}
						} 
					}
					State = 806;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
				}
				}
				break;
			case 2:
				{
				State = 807;
				Match(LeftBracket);
				State = 809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
					{
					State = 808;
					typeQualifierList();
					}
				}

				State = 812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
					{
					State = 811;
					assignmentExpression();
					}
				}

				State = 814;
				Match(RightBracket);
				}
				break;
			case 3:
				{
				State = 815;
				Match(LeftBracket);
				State = 816;
				Match(Static);
				State = 818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
					{
					State = 817;
					typeQualifierList();
					}
				}

				State = 820;
				assignmentExpression();
				State = 821;
				Match(RightBracket);
				}
				break;
			case 4:
				{
				State = 823;
				Match(LeftBracket);
				State = 824;
				typeQualifierList();
				State = 825;
				Match(Static);
				State = 826;
				assignmentExpression();
				State = 827;
				Match(RightBracket);
				}
				break;
			case 5:
				{
				State = 829;
				Match(LeftBracket);
				State = 830;
				Match(Star);
				State = 831;
				Match(RightBracket);
				}
				break;
			case 6:
				{
				State = 832;
				Match(LeftParen);
				State = 834;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Restrict) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Struct - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Atomic - 66)) | (1L << (Bool - 66)) | (1L << (Complex - 66)))) != 0) || _la==Identifier) {
					{
					State = 833;
					parameterTypeList();
					}
				}

				State = 836;
				Match(RightParen);
				State = 840;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 837;
						gccDeclaratorExtension();
						}
						} 
					}
					State = 842;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,91,Context);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 888;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 886;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
					case 1:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 845;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 846;
						Match(LeftBracket);
						State = 848;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
							{
							State = 847;
							typeQualifierList();
							}
						}

						State = 851;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
							{
							State = 850;
							assignmentExpression();
							}
						}

						State = 853;
						Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 854;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 855;
						Match(LeftBracket);
						State = 856;
						Match(Static);
						State = 858;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (Const - 44)) | (1L << (Restrict - 44)) | (1L << (Volatile - 44)) | (1L << (Atomic - 44)))) != 0)) {
							{
							State = 857;
							typeQualifierList();
							}
						}

						State = 860;
						assignmentExpression();
						State = 861;
						Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 863;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 864;
						Match(LeftBracket);
						State = 865;
						typeQualifierList();
						State = 866;
						Match(Static);
						State = 867;
						assignmentExpression();
						State = 868;
						Match(RightBracket);
						}
						break;
					case 4:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 870;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 871;
						Match(LeftBracket);
						State = 872;
						Match(Star);
						State = 873;
						Match(RightBracket);
						}
						break;
					case 5:
						{
						_localctx = new DirectAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_directAbstractDeclarator);
						State = 874;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 875;
						Match(LeftParen);
						State = 877;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << Restrict) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Struct - 66)) | (1L << (Union - 66)) | (1L << (Unsigned - 66)) | (1L << (Void - 66)) | (1L << (Volatile - 66)) | (1L << (Atomic - 66)) | (1L << (Bool - 66)) | (1L << (Complex - 66)))) != 0) || _la==Identifier) {
							{
							State = 876;
							parameterTypeList();
							}
						}

						State = 879;
						Match(RightParen);
						State = 883;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 880;
								gccDeclaratorExtension();
								}
								} 
							}
							State = 885;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
						}
						}
						break;
					}
					} 
				}
				State = 890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,99,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext typedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 891;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(SdccParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(SdccParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 132, RULE_initializer);
		int _la;
		try {
			State = 901;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case Sizeof:
			case Alignof:
			case Generic:
			case LeftParen:
			case Plus:
			case PlusPlus:
			case Minus:
			case MinusMinus:
			case Star:
			case And:
			case AndAnd:
			case Not:
			case Tilde:
			case Identifier:
			case Constant:
			case DigitSequence:
			case StringLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 893;
				assignmentExpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 894;
				Match(LeftBrace);
				State = 895;
				initializerList();
				State = 897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 896;
					Match(Comma);
					}
				}

				State = 899;
				Match(RightBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext[] initializer() {
			return GetRuleContexts<InitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer(int i) {
			return GetRuleContext<InitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignationContext[] designation() {
			return GetRuleContexts<DesignationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignationContext designation(int i) {
			return GetRuleContext<DesignationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext initializerList() {
		InitializerListContext _localctx = new InitializerListContext(Context, State);
		EnterRule(_localctx, 134, RULE_initializerList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBracket || _la==Dot) {
				{
				State = 903;
				designation();
				}
			}

			State = 906;
			initializer();
			State = 914;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 907;
					Match(Comma);
					State = 909;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LeftBracket || _la==Dot) {
						{
						State = 908;
						designation();
						}
					}

					State = 911;
					initializer();
					}
					} 
				}
				State = 916;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorListContext designatorList() {
			return GetRuleContext<DesignatorListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(SdccParser.Assign, 0); }
		public DesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDesignation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDesignation(this);
		}
	}

	[RuleVersion(0)]
	public DesignationContext designation() {
		DesignationContext _localctx = new DesignationContext(Context, State);
		EnterRule(_localctx, 136, RULE_designation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 917;
			designatorList();
			State = 918;
			Match(Assign);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext[] designator() {
			return GetRuleContexts<DesignatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator(int i) {
			return GetRuleContext<DesignatorContext>(i);
		}
		public DesignatorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designatorList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDesignatorList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDesignatorList(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorListContext designatorList() {
		DesignatorListContext _localctx = new DesignatorListContext(Context, State);
		EnterRule(_localctx, 138, RULE_designatorList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 920;
				designator();
				}
				}
				State = 923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LeftBracket || _la==Dot );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(SdccParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(SdccParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(SdccParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 140, RULE_designator);
		try {
			State = 931;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 925;
				Match(LeftBracket);
				State = 926;
				constantExpression();
				State = 927;
				Match(RightBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 929;
				Match(Dot);
				State = 930;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StaticAssert() { return GetToken(SdccParser.StaticAssert, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SdccParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(SdccParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(SdccParser.StringLiteral, i);
		}
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStaticAssertDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStaticAssertDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext staticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 142, RULE_staticAssertDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			Match(StaticAssert);
			State = 934;
			Match(LeftParen);
			State = 935;
			constantExpression();
			State = 936;
			Match(Comma);
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 937;
				Match(StringLiteral);
				}
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==StringLiteral );
			State = 942;
			Match(RightParen);
			State = 943;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext[] logicalOrExpression() {
			return GetRuleContexts<LogicalOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOrExpressionContext logicalOrExpression(int i) {
			return GetRuleContext<LogicalOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(SdccParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(SdccParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Volatile() { return GetToken(SdccParser.Volatile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 144, RULE_statement);
		int _la;
		try {
			State = 984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 945;
				labeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 946;
				compoundStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 947;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 948;
				selectionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 949;
				iterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 950;
				jumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 951;
				_la = TokenStream.LA(1);
				if ( !(_la==T__20 || _la==T__21) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__38 || _la==Volatile) {
					{
					State = 952;
					_la = TokenStream.LA(1);
					if ( !(_la==T__38 || _la==Volatile) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 955;
				Match(LeftParen);
				State = 964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
					{
					State = 956;
					logicalOrExpression();
					State = 961;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 957;
						Match(Comma);
						State = 958;
						logicalOrExpression();
						}
						}
						State = 963;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Colon) {
					{
					{
					State = 966;
					Match(Colon);
					State = 975;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
						{
						State = 967;
						logicalOrExpression();
						State = 972;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 968;
							Match(Comma);
							State = 969;
							logicalOrExpression();
							}
							}
							State = 974;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
					}

					}
					}
					State = 981;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 982;
				Match(RightParen);
				State = 983;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SdccParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(SdccParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(SdccParser.Default, 0); }
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext labeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 146, RULE_labeledStatement);
		try {
			State = 997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986;
				Match(Identifier);
				State = 987;
				Match(Colon);
				State = 988;
				statement();
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 2);
				{
				State = 989;
				Match(Case);
				State = 990;
				constantExpression();
				State = 991;
				Match(Colon);
				State = 992;
				statement();
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 3);
				{
				State = 994;
				Match(Default);
				State = 995;
				Match(Colon);
				State = 996;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(SdccParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(SdccParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemListContext blockItemList() {
			return GetRuleContext<BlockItemListContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 148, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 999;
			Match(LeftBrace);
			State = 1001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Return) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Sizeof - 64)) | (1L << (Static - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Typedef - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (While - 64)) | (1L << (Alignas - 64)) | (1L << (Alignof - 64)) | (1L << (Atomic - 64)) | (1L << (Bool - 64)) | (1L << (Complex - 64)) | (1L << (Generic - 64)) | (1L << (Noreturn - 64)) | (1L << (StaticAssert - 64)) | (1L << (ThreadLocal - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (PlusPlus - 64)) | (1L << (Minus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (AndAnd - 64)) | (1L << (Not - 64)) | (1L << (Tilde - 64)) | (1L << (Semi - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Identifier - 130)) | (1L << (Constant - 130)) | (1L << (DigitSequence - 130)) | (1L << (StringLiteral - 130)))) != 0)) {
				{
				State = 1000;
				blockItemList();
				}
			}

			State = 1003;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext[] blockItem() {
			return GetRuleContexts<BlockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockItemContext blockItem(int i) {
			return GetRuleContext<BlockItemContext>(i);
		}
		public BlockItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterBlockItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitBlockItemList(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemListContext blockItemList() {
		BlockItemListContext _localctx = new BlockItemListContext(Context, State);
		EnterRule(_localctx, 150, RULE_blockItemList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1005;
				blockItem();
				}
				}
				State = 1008;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << Auto) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Const) | (1L << Continue) | (1L << Default) | (1L << Do) | (1L << Double) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << For) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Return) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Sizeof - 64)) | (1L << (Static - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (Typedef - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (While - 64)) | (1L << (Alignas - 64)) | (1L << (Alignof - 64)) | (1L << (Atomic - 64)) | (1L << (Bool - 64)) | (1L << (Complex - 64)) | (1L << (Generic - 64)) | (1L << (Noreturn - 64)) | (1L << (StaticAssert - 64)) | (1L << (ThreadLocal - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (PlusPlus - 64)) | (1L << (Minus - 64)) | (1L << (MinusMinus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (AndAnd - 64)) | (1L << (Not - 64)) | (1L << (Tilde - 64)) | (1L << (Semi - 64)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (Identifier - 130)) | (1L << (Constant - 130)) | (1L << (DigitSequence - 130)) | (1L << (StringLiteral - 130)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public BlockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterBlockItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitBlockItem(this);
		}
	}

	[RuleVersion(0)]
	public BlockItemContext blockItem() {
		BlockItemContext _localctx = new BlockItemContext(Context, State);
		EnterRule(_localctx, 152, RULE_blockItem);
		try {
			State = 1013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1010;
				statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1011;
				declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1012;
				staticAssertDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
				{
				State = 1015;
				expression();
				}
			}

			State = 1018;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(SdccParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(SdccParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(SdccParser.Switch, 0); }
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext selectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 156, RULE_selectionStatement);
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020;
				Match(If);
				State = 1021;
				Match(LeftParen);
				State = 1022;
				expression();
				State = 1023;
				Match(RightParen);
				State = 1024;
				statement();
				State = 1027;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
				case 1:
					{
					State = 1025;
					Match(Else);
					State = 1026;
					statement();
					}
					break;
				}
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1029;
				Match(Switch);
				State = 1030;
				Match(LeftParen);
				State = 1031;
				expression();
				State = 1032;
				Match(RightParen);
				State = 1033;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(SdccParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(SdccParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(SdccParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(SdccParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(SdccParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 158, RULE_iterationStatement);
		try {
			State = 1057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037;
				Match(While);
				State = 1038;
				Match(LeftParen);
				State = 1039;
				expression();
				State = 1040;
				Match(RightParen);
				State = 1041;
				statement();
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1043;
				Match(Do);
				State = 1044;
				statement();
				State = 1045;
				Match(While);
				State = 1046;
				Match(LeftParen);
				State = 1047;
				expression();
				State = 1048;
				Match(RightParen);
				State = 1049;
				Match(Semi);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1051;
				Match(For);
				State = 1052;
				Match(LeftParen);
				State = 1053;
				forCondition();
				State = 1054;
				Match(RightParen);
				State = 1055;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semi() { return GetTokens(SdccParser.Semi); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi(int i) {
			return GetToken(SdccParser.Semi, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForDeclarationContext forDeclaration() {
			return GetRuleContext<ForDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext[] forExpression() {
			return GetRuleContexts<ForExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForExpressionContext forExpression(int i) {
			return GetRuleContext<ForExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterForCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitForCondition(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 160, RULE_forCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1059;
				forDeclaration();
				}
				break;
			case 2:
				{
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
					{
					State = 1060;
					expression();
					}
				}

				}
				break;
			}
			State = 1065;
			Match(Semi);
			State = 1067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
				{
				State = 1066;
				forExpression();
				}
			}

			State = 1069;
			Match(Semi);
			State = 1071;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
				{
				State = 1070;
				forExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public ForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterForDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitForDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ForDeclarationContext forDeclaration() {
		ForDeclarationContext _localctx = new ForDeclarationContext(Context, State);
		EnterRule(_localctx, 162, RULE_forDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1073;
			declarationSpecifiers();
			State = 1075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (LeftParen - 84)) | (1L << (Star - 84)) | (1L << (Caret - 84)) | (1L << (Identifier - 84)))) != 0)) {
				{
				State = 1074;
				initDeclaratorList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext[] assignmentExpression() {
			return GetRuleContexts<AssignmentExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExpressionContext assignmentExpression(int i) {
			return GetRuleContext<AssignmentExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SdccParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SdccParser.Comma, i);
		}
		public ForExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterForExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitForExpression(this);
		}
	}

	[RuleVersion(0)]
	public ForExpressionContext forExpression() {
		ForExpressionContext _localctx = new ForExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_forExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			assignmentExpression();
			State = 1082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1078;
				Match(Comma);
				State = 1079;
				assignmentExpression();
				}
				}
				State = 1084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Goto() { return GetToken(SdccParser.Goto, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SdccParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(SdccParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(SdccParser.Continue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(SdccParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext jumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_jumpStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1085;
				Match(Goto);
				State = 1086;
				Match(Identifier);
				}
				break;
			case 2:
				{
				State = 1087;
				_la = TokenStream.LA(1);
				if ( !(_la==Break || _la==Continue) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				State = 1088;
				Match(Return);
				State = 1090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & ((1L << (T__0 - 1)) | (1L << (T__1 - 1)) | (1L << (T__2 - 1)) | (1L << (Sizeof - 1)))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (Alignof - 75)) | (1L << (Generic - 75)) | (1L << (LeftParen - 75)) | (1L << (Plus - 75)) | (1L << (PlusPlus - 75)) | (1L << (Minus - 75)) | (1L << (MinusMinus - 75)) | (1L << (Star - 75)) | (1L << (And - 75)) | (1L << (AndAnd - 75)) | (1L << (Not - 75)) | (1L << (Tilde - 75)) | (1L << (Identifier - 75)) | (1L << (Constant - 75)) | (1L << (DigitSequence - 75)) | (1L << (StringLiteral - 75)))) != 0)) {
					{
					State = 1089;
					expression();
					}
				}

				}
				break;
			case 4:
				{
				State = 1092;
				Match(Goto);
				State = 1093;
				unaryExpression();
				}
				break;
			}
			State = 1096;
			Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SdccParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TranslationUnitContext translationUnit() {
			return GetRuleContext<TranslationUnitContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 168, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static - 65)) | (1L << (Struct - 65)) | (1L << (Typedef - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Alignas - 65)) | (1L << (Atomic - 65)) | (1L << (Bool - 65)) | (1L << (Complex - 65)) | (1L << (Noreturn - 65)) | (1L << (StaticAssert - 65)) | (1L << (ThreadLocal - 65)) | (1L << (LeftParen - 65)) | (1L << (Star - 65)) | (1L << (Caret - 65)) | (1L << (Semi - 65)))) != 0) || _la==Identifier) {
				{
				State = 1098;
				translationUnit();
				}
			}

			State = 1101;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext[] externalDeclaration() {
			return GetRuleContexts<ExternalDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalDeclarationContext externalDeclaration(int i) {
			return GetRuleContext<ExternalDeclarationContext>(i);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext translationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 170, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1103;
				externalDeclaration();
				}
				}
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << Auto) | (1L << Char) | (1L << Const) | (1L << Double) | (1L << Enum) | (1L << Extern) | (1L << Float) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Register) | (1L << Restrict) | (1L << Short) | (1L << Signed))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Static - 65)) | (1L << (Struct - 65)) | (1L << (Typedef - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Alignas - 65)) | (1L << (Atomic - 65)) | (1L << (Bool - 65)) | (1L << (Complex - 65)) | (1L << (Noreturn - 65)) | (1L << (StaticAssert - 65)) | (1L << (ThreadLocal - 65)) | (1L << (LeftParen - 65)) | (1L << (Star - 65)) | (1L << (Caret - 65)) | (1L << (Semi - 65)))) != 0) || _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semi() { return GetToken(SdccParser.Semi, 0); }
		public ExternalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterExternalDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitExternalDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExternalDeclarationContext externalDeclaration() {
		ExternalDeclarationContext _localctx = new ExternalDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_externalDeclaration);
		try {
			State = 1112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1108;
				staticAssertDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1109;
				functionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1110;
				declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1111;
				Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationSpecifiersContext declarationSpecifiers() {
			return GetRuleContext<DeclarationSpecifiersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISdccListener typedListener = listener as ISdccListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 174, RULE_functionDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1114;
				declarationSpecifiers();
				}
				break;
			}
			State = 1117;
			declarator();
			State = 1118;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return directDeclarator_sempred((DirectDeclaratorContext)_localctx, predIndex);
		case 64: return directAbstractDeclarator_sempred((DirectAbstractDeclaratorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool directDeclarator_sempred(DirectDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}
	private bool directAbstractDeclarator_sempred(DirectAbstractDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,143,1121,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,0,4,0,180,8,0,11,0,12,0,181,1,
		0,1,0,1,0,1,0,1,0,1,0,3,0,190,8,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,210,8,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,2,1,2,1,2,5,2,222,8,2,10,2,12,2,225,9,2,1,3,1,3,3,3,229,8,3,1,
		3,1,3,1,3,1,4,1,4,3,4,236,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,244,8,4,1,4,
		1,4,3,4,248,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,256,8,4,1,4,1,4,1,4,1,4,5,
		4,262,8,4,10,4,12,4,265,9,4,1,5,1,5,1,5,5,5,270,8,5,10,5,12,5,273,9,5,
		1,6,5,6,276,8,6,10,6,12,6,279,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,3,6,292,8,6,1,7,1,7,1,8,3,8,297,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,3,8,306,8,8,1,9,1,9,1,9,5,9,311,8,9,10,9,12,9,314,9,9,1,10,1,10,1,10,
		5,10,319,8,10,10,10,12,10,322,9,10,1,11,1,11,1,11,5,11,327,8,11,10,11,
		12,11,330,9,11,1,12,1,12,1,12,5,12,335,8,12,10,12,12,12,338,9,12,1,13,
		1,13,1,13,5,13,343,8,13,10,13,12,13,346,9,13,1,14,1,14,1,14,5,14,351,8,
		14,10,14,12,14,354,9,14,1,15,1,15,1,15,5,15,359,8,15,10,15,12,15,362,9,
		15,1,16,1,16,1,16,5,16,367,8,16,10,16,12,16,370,9,16,1,17,1,17,1,17,5,
		17,375,8,17,10,17,12,17,378,9,17,1,18,1,18,1,18,5,18,383,8,18,10,18,12,
		18,386,9,18,1,19,1,19,1,19,1,19,1,19,1,19,3,19,394,8,19,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,402,8,20,1,21,1,21,1,22,1,22,1,22,5,22,409,8,22,10,
		22,12,22,412,9,22,1,23,1,23,1,24,1,24,3,24,418,8,24,1,24,1,24,1,25,4,25,
		423,8,25,11,25,12,25,424,1,26,4,26,428,8,26,11,26,12,26,429,1,27,1,27,
		1,27,1,27,1,27,3,27,437,8,27,1,28,1,28,1,28,5,28,442,8,28,10,28,12,28,
		445,9,28,1,29,1,29,1,29,3,29,450,8,29,1,30,1,30,1,31,1,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,468,8,31,1,32,1,32,
		3,32,472,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,481,8,32,1,33,1,
		33,1,34,4,34,486,8,34,11,34,12,34,487,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,1,35,3,35,498,8,35,1,36,1,36,3,36,502,8,36,1,36,3,36,505,8,36,1,37,
		1,37,1,37,5,37,510,8,37,10,37,12,37,513,9,37,1,38,1,38,3,38,517,8,38,1,
		38,1,38,3,38,521,8,38,1,39,1,39,3,39,525,8,39,1,39,1,39,1,39,3,39,530,
		8,39,1,39,1,39,1,39,1,39,3,39,536,8,39,1,40,1,40,1,40,5,40,541,8,40,10,
		40,12,40,544,9,40,1,41,1,41,1,41,3,41,549,8,41,1,42,1,42,1,43,1,43,1,43,
		1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,3,45,566,8,45,1,46,1,
		46,1,46,1,46,3,46,572,8,46,1,46,1,46,1,47,3,47,577,8,47,1,47,1,47,5,47,
		581,8,47,10,47,12,47,584,9,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,603,8,48,1,48,1,48,1,
		48,3,48,608,8,48,1,48,3,48,611,8,48,1,48,1,48,1,48,1,48,1,48,3,48,618,
		8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
		3,48,633,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,645,
		8,48,1,48,5,48,648,8,48,10,48,12,48,651,9,48,1,49,1,49,1,50,1,50,1,50,
		4,50,658,8,50,11,50,12,50,659,1,50,1,50,3,50,664,8,50,1,51,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,682,
		8,51,1,52,3,52,685,8,52,1,52,1,52,3,52,689,8,52,5,52,691,8,52,10,52,12,
		52,694,9,52,1,53,1,53,1,53,3,53,699,8,53,1,53,3,53,702,8,53,1,54,1,54,
		1,54,1,54,1,54,5,54,709,8,54,10,54,12,54,712,9,54,1,55,1,55,3,55,716,8,
		55,4,55,718,8,55,11,55,12,55,719,1,56,4,56,723,8,56,11,56,12,56,724,1,
		57,1,57,1,57,3,57,730,8,57,1,58,1,58,1,58,5,58,735,8,58,10,58,12,58,738,
		9,58,1,59,1,59,4,59,742,8,59,11,59,12,59,743,1,59,1,59,3,59,748,8,59,1,
		60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
		60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,771,8,60,1,61,1,61,1,61,5,61,776,
		8,61,10,61,12,61,779,9,61,1,62,1,62,3,62,783,8,62,1,63,1,63,3,63,787,8,
		63,1,63,1,63,5,63,791,8,63,10,63,12,63,794,9,63,3,63,796,8,63,1,64,1,64,
		1,64,1,64,1,64,5,64,803,8,64,10,64,12,64,806,9,64,1,64,1,64,3,64,810,8,
		64,1,64,3,64,813,8,64,1,64,1,64,1,64,1,64,3,64,819,8,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,835,8,64,1,
		64,1,64,5,64,839,8,64,10,64,12,64,842,9,64,3,64,844,8,64,1,64,1,64,1,64,
		3,64,849,8,64,1,64,3,64,852,8,64,1,64,1,64,1,64,1,64,1,64,3,64,859,8,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,3,64,878,8,64,1,64,1,64,5,64,882,8,64,10,64,12,64,885,9,
		64,5,64,887,8,64,10,64,12,64,890,9,64,1,65,1,65,1,66,1,66,1,66,1,66,3,
		66,898,8,66,1,66,1,66,3,66,902,8,66,1,67,3,67,905,8,67,1,67,1,67,1,67,
		3,67,910,8,67,1,67,5,67,913,8,67,10,67,12,67,916,9,67,1,68,1,68,1,68,1,
		69,4,69,922,8,69,11,69,12,69,923,1,70,1,70,1,70,1,70,1,70,1,70,3,70,932,
		8,70,1,71,1,71,1,71,1,71,1,71,4,71,939,8,71,11,71,12,71,940,1,71,1,71,
		1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,954,8,72,1,72,1,72,1,
		72,1,72,5,72,960,8,72,10,72,12,72,963,9,72,3,72,965,8,72,1,72,1,72,1,72,
		1,72,5,72,971,8,72,10,72,12,72,974,9,72,3,72,976,8,72,5,72,978,8,72,10,
		72,12,72,981,9,72,1,72,1,72,3,72,985,8,72,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,3,73,998,8,73,1,74,1,74,3,74,1002,8,74,1,74,1,
		74,1,75,4,75,1007,8,75,11,75,12,75,1008,1,76,1,76,1,76,3,76,1014,8,76,
		1,77,3,77,1017,8,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,
		1028,8,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1036,8,78,1,79,1,79,1,79,
		1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
		1,79,1,79,1,79,3,79,1058,8,79,1,80,1,80,3,80,1062,8,80,3,80,1064,8,80,
		1,80,1,80,3,80,1068,8,80,1,80,1,80,3,80,1072,8,80,1,81,1,81,3,81,1076,
		8,81,1,82,1,82,1,82,5,82,1081,8,82,10,82,12,82,1084,9,82,1,83,1,83,1,83,
		1,83,1,83,3,83,1091,8,83,1,83,1,83,3,83,1095,8,83,1,83,1,83,1,84,3,84,
		1100,8,84,1,84,1,84,1,85,4,85,1105,8,85,11,85,12,85,1106,1,86,1,86,1,86,
		1,86,3,86,1113,8,86,1,87,3,87,1116,8,87,1,87,1,87,1,87,1,87,0,2,96,128,
		88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		168,170,172,174,0,27,1,0,127,128,2,0,97,97,99,99,3,0,64,64,97,97,99,99,
		2,0,64,64,75,75,5,0,96,96,98,98,100,100,103,103,108,109,1,0,100,102,2,
		0,96,96,98,98,1,0,94,95,1,0,90,93,1,0,125,126,1,0,114,124,6,0,40,40,51,
		51,59,59,65,65,68,68,83,83,8,0,4,11,43,43,48,48,52,52,57,58,62,63,70,71,
		77,78,1,0,9,11,2,0,66,66,69,69,4,0,44,44,60,60,72,72,76,76,3,0,13,14,56,
		56,81,81,2,0,14,14,16,20,1,0,21,22,1,0,27,29,1,0,30,31,1,0,32,38,2,0,84,
		85,113,113,1,0,84,85,2,0,100,100,107,107,2,0,39,39,72,72,2,0,41,41,45,
		45,1226,0,209,1,0,0,0,2,211,1,0,0,0,4,218,1,0,0,0,6,228,1,0,0,0,8,247,
		1,0,0,0,10,266,1,0,0,0,12,277,1,0,0,0,14,293,1,0,0,0,16,305,1,0,0,0,18,
		307,1,0,0,0,20,315,1,0,0,0,22,323,1,0,0,0,24,331,1,0,0,0,26,339,1,0,0,
		0,28,347,1,0,0,0,30,355,1,0,0,0,32,363,1,0,0,0,34,371,1,0,0,0,36,379,1,
		0,0,0,38,387,1,0,0,0,40,401,1,0,0,0,42,403,1,0,0,0,44,405,1,0,0,0,46,413,
		1,0,0,0,48,415,1,0,0,0,50,422,1,0,0,0,52,427,1,0,0,0,54,436,1,0,0,0,56,
		438,1,0,0,0,58,446,1,0,0,0,60,451,1,0,0,0,62,467,1,0,0,0,64,480,1,0,0,
		0,66,482,1,0,0,0,68,485,1,0,0,0,70,497,1,0,0,0,72,501,1,0,0,0,74,506,1,
		0,0,0,76,520,1,0,0,0,78,535,1,0,0,0,80,537,1,0,0,0,82,545,1,0,0,0,84,550,
		1,0,0,0,86,552,1,0,0,0,88,557,1,0,0,0,90,565,1,0,0,0,92,567,1,0,0,0,94,
		576,1,0,0,0,96,602,1,0,0,0,98,652,1,0,0,0,100,663,1,0,0,0,102,681,1,0,
		0,0,104,684,1,0,0,0,106,695,1,0,0,0,108,710,1,0,0,0,110,717,1,0,0,0,112,
		722,1,0,0,0,114,726,1,0,0,0,116,731,1,0,0,0,118,741,1,0,0,0,120,770,1,
		0,0,0,122,772,1,0,0,0,124,780,1,0,0,0,126,795,1,0,0,0,128,843,1,0,0,0,
		130,891,1,0,0,0,132,901,1,0,0,0,134,904,1,0,0,0,136,917,1,0,0,0,138,921,
		1,0,0,0,140,931,1,0,0,0,142,933,1,0,0,0,144,984,1,0,0,0,146,997,1,0,0,
		0,148,999,1,0,0,0,150,1006,1,0,0,0,152,1013,1,0,0,0,154,1016,1,0,0,0,156,
		1035,1,0,0,0,158,1057,1,0,0,0,160,1063,1,0,0,0,162,1073,1,0,0,0,164,1077,
		1,0,0,0,166,1094,1,0,0,0,168,1099,1,0,0,0,170,1104,1,0,0,0,172,1112,1,
		0,0,0,174,1115,1,0,0,0,176,210,5,130,0,0,177,210,5,131,0,0,178,180,5,133,
		0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,
		210,1,0,0,0,183,184,5,84,0,0,184,185,3,44,22,0,185,186,5,85,0,0,186,210,
		1,0,0,0,187,210,3,2,1,0,188,190,5,1,0,0,189,188,1,0,0,0,189,190,1,0,0,
		0,190,191,1,0,0,0,191,192,5,84,0,0,192,193,3,148,74,0,193,194,5,85,0,0,
		194,210,1,0,0,0,195,196,5,2,0,0,196,197,5,84,0,0,197,198,3,12,6,0,198,
		199,5,113,0,0,199,200,3,124,62,0,200,201,5,85,0,0,201,210,1,0,0,0,202,
		203,5,3,0,0,203,204,5,84,0,0,204,205,3,124,62,0,205,206,5,113,0,0,206,
		207,3,12,6,0,207,208,5,85,0,0,208,210,1,0,0,0,209,176,1,0,0,0,209,177,
		1,0,0,0,209,179,1,0,0,0,209,183,1,0,0,0,209,187,1,0,0,0,209,189,1,0,0,
		0,209,195,1,0,0,0,209,202,1,0,0,0,210,1,1,0,0,0,211,212,5,79,0,0,212,213,
		5,84,0,0,213,214,3,40,20,0,214,215,5,113,0,0,215,216,3,4,2,0,216,217,5,
		85,0,0,217,3,1,0,0,0,218,223,3,6,3,0,219,220,5,113,0,0,220,222,3,6,3,0,
		221,219,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,5,
		1,0,0,0,225,223,1,0,0,0,226,229,3,124,62,0,227,229,5,46,0,0,228,226,1,
		0,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,231,5,111,0,0,231,232,3,40,20,
		0,232,7,1,0,0,0,233,248,3,0,0,0,234,236,5,1,0,0,235,234,1,0,0,0,235,236,
		1,0,0,0,236,237,1,0,0,0,237,238,5,84,0,0,238,239,3,124,62,0,239,240,5,
		85,0,0,240,241,5,88,0,0,241,243,3,134,67,0,242,244,5,113,0,0,243,242,1,
		0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,5,89,0,0,246,248,1,0,0,0,
		247,233,1,0,0,0,247,235,1,0,0,0,248,263,1,0,0,0,249,250,5,86,0,0,250,251,
		3,44,22,0,251,252,5,87,0,0,252,262,1,0,0,0,253,255,5,84,0,0,254,256,3,
		10,5,0,255,254,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,262,5,85,0,
		0,258,259,7,0,0,0,259,262,5,130,0,0,260,262,7,1,0,0,261,249,1,0,0,0,261,
		253,1,0,0,0,261,258,1,0,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,
		0,0,0,263,264,1,0,0,0,264,9,1,0,0,0,265,263,1,0,0,0,266,271,3,40,20,0,
		267,268,5,113,0,0,268,270,3,40,20,0,269,267,1,0,0,0,270,273,1,0,0,0,271,
		269,1,0,0,0,271,272,1,0,0,0,272,11,1,0,0,0,273,271,1,0,0,0,274,276,7,2,
		0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,
		291,1,0,0,0,279,277,1,0,0,0,280,292,3,8,4,0,281,282,3,14,7,0,282,283,3,
		16,8,0,283,292,1,0,0,0,284,285,7,3,0,0,285,286,5,84,0,0,286,287,3,124,
		62,0,287,288,5,85,0,0,288,292,1,0,0,0,289,290,5,105,0,0,290,292,5,130,
		0,0,291,280,1,0,0,0,291,281,1,0,0,0,291,284,1,0,0,0,291,289,1,0,0,0,292,
		13,1,0,0,0,293,294,7,4,0,0,294,15,1,0,0,0,295,297,5,1,0,0,296,295,1,0,
		0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,84,0,0,299,300,3,124,62,
		0,300,301,5,85,0,0,301,302,3,16,8,0,302,306,1,0,0,0,303,306,3,12,6,0,304,
		306,5,132,0,0,305,296,1,0,0,0,305,303,1,0,0,0,305,304,1,0,0,0,306,17,1,
		0,0,0,307,312,3,16,8,0,308,309,7,5,0,0,309,311,3,16,8,0,310,308,1,0,0,
		0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,19,1,0,0,0,314,312,
		1,0,0,0,315,320,3,18,9,0,316,317,7,6,0,0,317,319,3,18,9,0,318,316,1,0,
		0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,21,1,0,0,0,322,
		320,1,0,0,0,323,328,3,20,10,0,324,325,7,7,0,0,325,327,3,20,10,0,326,324,
		1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,23,1,0,0,0,
		330,328,1,0,0,0,331,336,3,22,11,0,332,333,7,8,0,0,333,335,3,22,11,0,334,
		332,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,25,1,0,
		0,0,338,336,1,0,0,0,339,344,3,24,12,0,340,341,7,9,0,0,341,343,3,24,12,
		0,342,340,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,
		27,1,0,0,0,346,344,1,0,0,0,347,352,3,26,13,0,348,349,5,103,0,0,349,351,
		3,26,13,0,350,348,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,
		0,0,353,29,1,0,0,0,354,352,1,0,0,0,355,360,3,28,14,0,356,357,5,107,0,0,
		357,359,3,28,14,0,358,356,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,
		361,1,0,0,0,361,31,1,0,0,0,362,360,1,0,0,0,363,368,3,30,15,0,364,365,5,
		104,0,0,365,367,3,30,15,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,
		0,0,368,369,1,0,0,0,369,33,1,0,0,0,370,368,1,0,0,0,371,376,3,32,16,0,372,
		373,5,105,0,0,373,375,3,32,16,0,374,372,1,0,0,0,375,378,1,0,0,0,376,374,
		1,0,0,0,376,377,1,0,0,0,377,35,1,0,0,0,378,376,1,0,0,0,379,384,3,34,17,
		0,380,381,5,106,0,0,381,383,3,34,17,0,382,380,1,0,0,0,383,386,1,0,0,0,
		384,382,1,0,0,0,384,385,1,0,0,0,385,37,1,0,0,0,386,384,1,0,0,0,387,393,
		3,36,18,0,388,389,5,110,0,0,389,390,3,44,22,0,390,391,5,111,0,0,391,392,
		3,38,19,0,392,394,1,0,0,0,393,388,1,0,0,0,393,394,1,0,0,0,394,39,1,0,0,
		0,395,402,3,38,19,0,396,397,3,12,6,0,397,398,3,42,21,0,398,399,3,40,20,
		0,399,402,1,0,0,0,400,402,5,132,0,0,401,395,1,0,0,0,401,396,1,0,0,0,401,
		400,1,0,0,0,402,41,1,0,0,0,403,404,7,10,0,0,404,43,1,0,0,0,405,410,3,40,
		20,0,406,407,5,113,0,0,407,409,3,40,20,0,408,406,1,0,0,0,409,412,1,0,0,
		0,410,408,1,0,0,0,410,411,1,0,0,0,411,45,1,0,0,0,412,410,1,0,0,0,413,414,
		3,38,19,0,414,47,1,0,0,0,415,417,3,50,25,0,416,418,3,56,28,0,417,416,1,
		0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,112,0,0,420,49,1,0,0,0,
		421,423,3,54,27,0,422,421,1,0,0,0,423,424,1,0,0,0,424,422,1,0,0,0,424,
		425,1,0,0,0,425,51,1,0,0,0,426,428,3,54,27,0,427,426,1,0,0,0,428,429,1,
		0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,53,1,0,0,0,431,437,3,60,30,0,
		432,437,3,62,31,0,433,437,3,88,44,0,434,437,3,90,45,0,435,437,3,92,46,
		0,436,431,1,0,0,0,436,432,1,0,0,0,436,433,1,0,0,0,436,434,1,0,0,0,436,
		435,1,0,0,0,437,55,1,0,0,0,438,443,3,58,29,0,439,440,5,113,0,0,440,442,
		3,58,29,0,441,439,1,0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,
		0,0,444,57,1,0,0,0,445,443,1,0,0,0,446,449,3,94,47,0,447,448,5,114,0,0,
		448,450,3,132,66,0,449,447,1,0,0,0,449,450,1,0,0,0,450,59,1,0,0,0,451,
		452,7,11,0,0,452,61,1,0,0,0,453,468,7,12,0,0,454,455,5,1,0,0,455,456,5,
		84,0,0,456,457,7,13,0,0,457,468,5,85,0,0,458,468,3,86,43,0,459,468,3,64,
		32,0,460,468,3,78,39,0,461,468,3,130,65,0,462,463,5,12,0,0,463,464,5,84,
		0,0,464,465,3,46,23,0,465,466,5,85,0,0,466,468,1,0,0,0,467,453,1,0,0,0,
		467,454,1,0,0,0,467,458,1,0,0,0,467,459,1,0,0,0,467,460,1,0,0,0,467,461,
		1,0,0,0,467,462,1,0,0,0,468,63,1,0,0,0,469,471,3,66,33,0,470,472,5,130,
		0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,473,1,0,0,0,473,474,5,88,0,0,474,
		475,3,68,34,0,475,476,5,89,0,0,476,481,1,0,0,0,477,478,3,66,33,0,478,479,
		5,130,0,0,479,481,1,0,0,0,480,469,1,0,0,0,480,477,1,0,0,0,481,65,1,0,0,
		0,482,483,7,14,0,0,483,67,1,0,0,0,484,486,3,70,35,0,485,484,1,0,0,0,486,
		487,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,69,1,0,0,0,489,490,3,72,
		36,0,490,491,3,74,37,0,491,492,5,112,0,0,492,498,1,0,0,0,493,494,3,72,
		36,0,494,495,5,112,0,0,495,498,1,0,0,0,496,498,3,142,71,0,497,489,1,0,
		0,0,497,493,1,0,0,0,497,496,1,0,0,0,498,71,1,0,0,0,499,502,3,62,31,0,500,
		502,3,88,44,0,501,499,1,0,0,0,501,500,1,0,0,0,502,504,1,0,0,0,503,505,
		3,72,36,0,504,503,1,0,0,0,504,505,1,0,0,0,505,73,1,0,0,0,506,511,3,76,
		38,0,507,508,5,113,0,0,508,510,3,76,38,0,509,507,1,0,0,0,510,513,1,0,0,
		0,511,509,1,0,0,0,511,512,1,0,0,0,512,75,1,0,0,0,513,511,1,0,0,0,514,521,
		3,94,47,0,515,517,3,94,47,0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,
		0,0,0,518,519,5,111,0,0,519,521,3,46,23,0,520,514,1,0,0,0,520,516,1,0,
		0,0,521,77,1,0,0,0,522,524,5,50,0,0,523,525,5,130,0,0,524,523,1,0,0,0,
		524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,88,0,0,527,529,3,80,40,0,528,
		530,5,113,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,532,
		5,89,0,0,532,536,1,0,0,0,533,534,5,50,0,0,534,536,5,130,0,0,535,522,1,
		0,0,0,535,533,1,0,0,0,536,79,1,0,0,0,537,542,3,82,41,0,538,539,5,113,0,
		0,539,541,3,82,41,0,540,538,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,
		543,1,0,0,0,543,81,1,0,0,0,544,542,1,0,0,0,545,548,3,84,42,0,546,547,5,
		114,0,0,547,549,3,46,23,0,548,546,1,0,0,0,548,549,1,0,0,0,549,83,1,0,0,
		0,550,551,5,130,0,0,551,85,1,0,0,0,552,553,5,76,0,0,553,554,5,84,0,0,554,
		555,3,124,62,0,555,556,5,85,0,0,556,87,1,0,0,0,557,558,7,15,0,0,558,89,
		1,0,0,0,559,566,7,16,0,0,560,566,3,102,51,0,561,562,5,15,0,0,562,563,5,
		84,0,0,563,564,5,130,0,0,564,566,5,85,0,0,565,559,1,0,0,0,565,560,1,0,
		0,0,565,561,1,0,0,0,566,91,1,0,0,0,567,568,5,74,0,0,568,571,5,84,0,0,569,
		572,3,124,62,0,570,572,3,46,23,0,571,569,1,0,0,0,571,570,1,0,0,0,572,573,
		1,0,0,0,573,574,5,85,0,0,574,93,1,0,0,0,575,577,3,110,55,0,576,575,1,0,
		0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,582,3,96,48,0,579,581,3,100,50,
		0,580,579,1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,
		95,1,0,0,0,584,582,1,0,0,0,585,586,6,48,-1,0,586,603,5,130,0,0,587,588,
		5,84,0,0,588,589,3,94,47,0,589,590,5,85,0,0,590,603,1,0,0,0,591,592,5,
		130,0,0,592,593,5,111,0,0,593,603,5,132,0,0,594,595,3,98,49,0,595,596,
		5,130,0,0,596,603,1,0,0,0,597,598,5,84,0,0,598,599,3,98,49,0,599,600,3,
		94,47,0,600,601,5,85,0,0,601,603,1,0,0,0,602,585,1,0,0,0,602,587,1,0,0,
		0,602,591,1,0,0,0,602,594,1,0,0,0,602,597,1,0,0,0,603,649,1,0,0,0,604,
		605,10,9,0,0,605,607,5,86,0,0,606,608,3,112,56,0,607,606,1,0,0,0,607,608,
		1,0,0,0,608,610,1,0,0,0,609,611,3,40,20,0,610,609,1,0,0,0,610,611,1,0,
		0,0,611,612,1,0,0,0,612,648,5,87,0,0,613,614,10,8,0,0,614,615,5,86,0,0,
		615,617,5,65,0,0,616,618,3,112,56,0,617,616,1,0,0,0,617,618,1,0,0,0,618,
		619,1,0,0,0,619,620,3,40,20,0,620,621,5,87,0,0,621,648,1,0,0,0,622,623,
		10,7,0,0,623,624,5,86,0,0,624,625,3,112,56,0,625,626,5,65,0,0,626,627,
		3,40,20,0,627,628,5,87,0,0,628,648,1,0,0,0,629,630,10,6,0,0,630,632,5,
		86,0,0,631,633,3,112,56,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,
		0,0,634,635,5,100,0,0,635,648,5,87,0,0,636,637,10,5,0,0,637,638,5,84,0,
		0,638,639,3,114,57,0,639,640,5,85,0,0,640,648,1,0,0,0,641,642,10,4,0,0,
		642,644,5,84,0,0,643,645,3,122,61,0,644,643,1,0,0,0,644,645,1,0,0,0,645,
		646,1,0,0,0,646,648,5,85,0,0,647,604,1,0,0,0,647,613,1,0,0,0,647,622,1,
		0,0,0,647,629,1,0,0,0,647,636,1,0,0,0,647,641,1,0,0,0,648,651,1,0,0,0,
		649,647,1,0,0,0,649,650,1,0,0,0,650,97,1,0,0,0,651,649,1,0,0,0,652,653,
		7,17,0,0,653,99,1,0,0,0,654,655,7,18,0,0,655,657,5,84,0,0,656,658,5,133,
		0,0,657,656,1,0,0,0,658,659,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,
		661,1,0,0,0,661,664,5,85,0,0,662,664,3,102,51,0,663,654,1,0,0,0,663,662,
		1,0,0,0,664,101,1,0,0,0,665,666,5,23,0,0,666,667,5,84,0,0,667,668,5,84,
		0,0,668,669,3,104,52,0,669,670,5,85,0,0,670,671,5,85,0,0,671,682,1,0,0,
		0,672,682,5,24,0,0,673,682,5,25,0,0,674,682,5,26,0,0,675,676,7,19,0,0,
		676,677,5,84,0,0,677,678,5,131,0,0,678,682,5,85,0,0,679,682,7,20,0,0,680,
		682,7,21,0,0,681,665,1,0,0,0,681,672,1,0,0,0,681,673,1,0,0,0,681,674,1,
		0,0,0,681,675,1,0,0,0,681,679,1,0,0,0,681,680,1,0,0,0,682,103,1,0,0,0,
		683,685,3,106,53,0,684,683,1,0,0,0,684,685,1,0,0,0,685,692,1,0,0,0,686,
		688,5,113,0,0,687,689,3,106,53,0,688,687,1,0,0,0,688,689,1,0,0,0,689,691,
		1,0,0,0,690,686,1,0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,
		0,693,105,1,0,0,0,694,692,1,0,0,0,695,701,8,22,0,0,696,698,5,84,0,0,697,
		699,3,10,5,0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,702,5,
		85,0,0,701,696,1,0,0,0,701,702,1,0,0,0,702,107,1,0,0,0,703,709,8,23,0,
		0,704,705,5,84,0,0,705,706,3,108,54,0,706,707,5,85,0,0,707,709,1,0,0,0,
		708,703,1,0,0,0,708,704,1,0,0,0,709,712,1,0,0,0,710,708,1,0,0,0,710,711,
		1,0,0,0,711,109,1,0,0,0,712,710,1,0,0,0,713,715,7,24,0,0,714,716,3,112,
		56,0,715,714,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,713,1,0,0,0,718,
		719,1,0,0,0,719,717,1,0,0,0,719,720,1,0,0,0,720,111,1,0,0,0,721,723,3,
		88,44,0,722,721,1,0,0,0,723,724,1,0,0,0,724,722,1,0,0,0,724,725,1,0,0,
		0,725,113,1,0,0,0,726,729,3,116,58,0,727,728,5,113,0,0,728,730,5,129,0,
		0,729,727,1,0,0,0,729,730,1,0,0,0,730,115,1,0,0,0,731,736,3,118,59,0,732,
		733,5,113,0,0,733,735,3,118,59,0,734,732,1,0,0,0,735,738,1,0,0,0,736,734,
		1,0,0,0,736,737,1,0,0,0,737,117,1,0,0,0,738,736,1,0,0,0,739,742,3,88,44,
		0,740,742,3,120,60,0,741,739,1,0,0,0,741,740,1,0,0,0,742,743,1,0,0,0,743,
		741,1,0,0,0,743,744,1,0,0,0,744,747,1,0,0,0,745,748,3,94,47,0,746,748,
		3,126,63,0,747,745,1,0,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,119,1,0,
		0,0,749,771,7,12,0,0,750,751,5,1,0,0,751,752,5,84,0,0,752,753,7,13,0,0,
		753,771,5,85,0,0,754,755,5,76,0,0,755,756,5,84,0,0,756,757,3,124,62,0,
		757,758,5,85,0,0,758,771,1,0,0,0,759,760,3,66,33,0,760,761,5,130,0,0,761,
		771,1,0,0,0,762,763,5,50,0,0,763,771,5,130,0,0,764,771,3,130,65,0,765,
		766,5,12,0,0,766,767,5,84,0,0,767,768,3,46,23,0,768,769,5,85,0,0,769,771,
		1,0,0,0,770,749,1,0,0,0,770,750,1,0,0,0,770,754,1,0,0,0,770,759,1,0,0,
		0,770,762,1,0,0,0,770,764,1,0,0,0,770,765,1,0,0,0,771,121,1,0,0,0,772,
		777,5,130,0,0,773,774,5,113,0,0,774,776,5,130,0,0,775,773,1,0,0,0,776,
		779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,123,1,0,0,0,779,777,1,
		0,0,0,780,782,3,72,36,0,781,783,3,126,63,0,782,781,1,0,0,0,782,783,1,0,
		0,0,783,125,1,0,0,0,784,796,3,110,55,0,785,787,3,110,55,0,786,785,1,0,
		0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,792,3,128,64,0,789,791,3,100,50,
		0,790,789,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,
		796,1,0,0,0,794,792,1,0,0,0,795,784,1,0,0,0,795,786,1,0,0,0,796,127,1,
		0,0,0,797,798,6,64,-1,0,798,799,5,84,0,0,799,800,3,126,63,0,800,804,5,
		85,0,0,801,803,3,100,50,0,802,801,1,0,0,0,803,806,1,0,0,0,804,802,1,0,
		0,0,804,805,1,0,0,0,805,844,1,0,0,0,806,804,1,0,0,0,807,809,5,86,0,0,808,
		810,3,112,56,0,809,808,1,0,0,0,809,810,1,0,0,0,810,812,1,0,0,0,811,813,
		3,40,20,0,812,811,1,0,0,0,812,813,1,0,0,0,813,814,1,0,0,0,814,844,5,87,
		0,0,815,816,5,86,0,0,816,818,5,65,0,0,817,819,3,112,56,0,818,817,1,0,0,
		0,818,819,1,0,0,0,819,820,1,0,0,0,820,821,3,40,20,0,821,822,5,87,0,0,822,
		844,1,0,0,0,823,824,5,86,0,0,824,825,3,112,56,0,825,826,5,65,0,0,826,827,
		3,40,20,0,827,828,5,87,0,0,828,844,1,0,0,0,829,830,5,86,0,0,830,831,5,
		100,0,0,831,844,5,87,0,0,832,834,5,84,0,0,833,835,3,114,57,0,834,833,1,
		0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,840,5,85,0,0,837,839,3,100,50,
		0,838,837,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,
		844,1,0,0,0,842,840,1,0,0,0,843,797,1,0,0,0,843,807,1,0,0,0,843,815,1,
		0,0,0,843,823,1,0,0,0,843,829,1,0,0,0,843,832,1,0,0,0,844,888,1,0,0,0,
		845,846,10,5,0,0,846,848,5,86,0,0,847,849,3,112,56,0,848,847,1,0,0,0,848,
		849,1,0,0,0,849,851,1,0,0,0,850,852,3,40,20,0,851,850,1,0,0,0,851,852,
		1,0,0,0,852,853,1,0,0,0,853,887,5,87,0,0,854,855,10,4,0,0,855,856,5,86,
		0,0,856,858,5,65,0,0,857,859,3,112,56,0,858,857,1,0,0,0,858,859,1,0,0,
		0,859,860,1,0,0,0,860,861,3,40,20,0,861,862,5,87,0,0,862,887,1,0,0,0,863,
		864,10,3,0,0,864,865,5,86,0,0,865,866,3,112,56,0,866,867,5,65,0,0,867,
		868,3,40,20,0,868,869,5,87,0,0,869,887,1,0,0,0,870,871,10,2,0,0,871,872,
		5,86,0,0,872,873,5,100,0,0,873,887,5,87,0,0,874,875,10,1,0,0,875,877,5,
		84,0,0,876,878,3,114,57,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,
		0,0,879,883,5,85,0,0,880,882,3,100,50,0,881,880,1,0,0,0,882,885,1,0,0,
		0,883,881,1,0,0,0,883,884,1,0,0,0,884,887,1,0,0,0,885,883,1,0,0,0,886,
		845,1,0,0,0,886,854,1,0,0,0,886,863,1,0,0,0,886,870,1,0,0,0,886,874,1,
		0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,889,129,1,0,0,0,
		890,888,1,0,0,0,891,892,5,130,0,0,892,131,1,0,0,0,893,902,3,40,20,0,894,
		895,5,88,0,0,895,897,3,134,67,0,896,898,5,113,0,0,897,896,1,0,0,0,897,
		898,1,0,0,0,898,899,1,0,0,0,899,900,5,89,0,0,900,902,1,0,0,0,901,893,1,
		0,0,0,901,894,1,0,0,0,902,133,1,0,0,0,903,905,3,136,68,0,904,903,1,0,0,
		0,904,905,1,0,0,0,905,906,1,0,0,0,906,914,3,132,66,0,907,909,5,113,0,0,
		908,910,3,136,68,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,
		913,3,132,66,0,912,907,1,0,0,0,913,916,1,0,0,0,914,912,1,0,0,0,914,915,
		1,0,0,0,915,135,1,0,0,0,916,914,1,0,0,0,917,918,3,138,69,0,918,919,5,114,
		0,0,919,137,1,0,0,0,920,922,3,140,70,0,921,920,1,0,0,0,922,923,1,0,0,0,
		923,921,1,0,0,0,923,924,1,0,0,0,924,139,1,0,0,0,925,926,5,86,0,0,926,927,
		3,46,23,0,927,928,5,87,0,0,928,932,1,0,0,0,929,930,5,128,0,0,930,932,5,
		130,0,0,931,925,1,0,0,0,931,929,1,0,0,0,932,141,1,0,0,0,933,934,5,82,0,
		0,934,935,5,84,0,0,935,936,3,46,23,0,936,938,5,113,0,0,937,939,5,133,0,
		0,938,937,1,0,0,0,939,940,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,
		942,1,0,0,0,942,943,5,85,0,0,943,944,5,112,0,0,944,143,1,0,0,0,945,985,
		3,146,73,0,946,985,3,148,74,0,947,985,3,154,77,0,948,985,3,156,78,0,949,
		985,3,158,79,0,950,985,3,166,83,0,951,953,7,18,0,0,952,954,7,25,0,0,953,
		952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,964,5,84,0,0,956,961,3,
		36,18,0,957,958,5,113,0,0,958,960,3,36,18,0,959,957,1,0,0,0,960,963,1,
		0,0,0,961,959,1,0,0,0,961,962,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,
		964,956,1,0,0,0,964,965,1,0,0,0,965,979,1,0,0,0,966,975,5,111,0,0,967,
		972,3,36,18,0,968,969,5,113,0,0,969,971,3,36,18,0,970,968,1,0,0,0,971,
		974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,976,1,0,0,0,974,972,1,
		0,0,0,975,967,1,0,0,0,975,976,1,0,0,0,976,978,1,0,0,0,977,966,1,0,0,0,
		978,981,1,0,0,0,979,977,1,0,0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,979,
		1,0,0,0,982,983,5,85,0,0,983,985,5,112,0,0,984,945,1,0,0,0,984,946,1,0,
		0,0,984,947,1,0,0,0,984,948,1,0,0,0,984,949,1,0,0,0,984,950,1,0,0,0,984,
		951,1,0,0,0,985,145,1,0,0,0,986,987,5,130,0,0,987,988,5,111,0,0,988,998,
		3,144,72,0,989,990,5,42,0,0,990,991,3,46,23,0,991,992,5,111,0,0,992,993,
		3,144,72,0,993,998,1,0,0,0,994,995,5,46,0,0,995,996,5,111,0,0,996,998,
		3,144,72,0,997,986,1,0,0,0,997,989,1,0,0,0,997,994,1,0,0,0,998,147,1,0,
		0,0,999,1001,5,88,0,0,1000,1002,3,150,75,0,1001,1000,1,0,0,0,1001,1002,
		1,0,0,0,1002,1003,1,0,0,0,1003,1004,5,89,0,0,1004,149,1,0,0,0,1005,1007,
		3,152,76,0,1006,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1006,1,0,0,0,1008,
		1009,1,0,0,0,1009,151,1,0,0,0,1010,1014,3,144,72,0,1011,1014,3,48,24,0,
		1012,1014,3,142,71,0,1013,1010,1,0,0,0,1013,1011,1,0,0,0,1013,1012,1,0,
		0,0,1014,153,1,0,0,0,1015,1017,3,44,22,0,1016,1015,1,0,0,0,1016,1017,1,
		0,0,0,1017,1018,1,0,0,0,1018,1019,5,112,0,0,1019,155,1,0,0,0,1020,1021,
		5,55,0,0,1021,1022,5,84,0,0,1022,1023,3,44,22,0,1023,1024,5,85,0,0,1024,
		1027,3,144,72,0,1025,1026,5,49,0,0,1026,1028,3,144,72,0,1027,1025,1,0,
		0,0,1027,1028,1,0,0,0,1028,1036,1,0,0,0,1029,1030,5,67,0,0,1030,1031,5,
		84,0,0,1031,1032,3,44,22,0,1032,1033,5,85,0,0,1033,1034,3,144,72,0,1034,
		1036,1,0,0,0,1035,1020,1,0,0,0,1035,1029,1,0,0,0,1036,157,1,0,0,0,1037,
		1038,5,73,0,0,1038,1039,5,84,0,0,1039,1040,3,44,22,0,1040,1041,5,85,0,
		0,1041,1042,3,144,72,0,1042,1058,1,0,0,0,1043,1044,5,47,0,0,1044,1045,
		3,144,72,0,1045,1046,5,73,0,0,1046,1047,5,84,0,0,1047,1048,3,44,22,0,1048,
		1049,5,85,0,0,1049,1050,5,112,0,0,1050,1058,1,0,0,0,1051,1052,5,53,0,0,
		1052,1053,5,84,0,0,1053,1054,3,160,80,0,1054,1055,5,85,0,0,1055,1056,3,
		144,72,0,1056,1058,1,0,0,0,1057,1037,1,0,0,0,1057,1043,1,0,0,0,1057,1051,
		1,0,0,0,1058,159,1,0,0,0,1059,1064,3,162,81,0,1060,1062,3,44,22,0,1061,
		1060,1,0,0,0,1061,1062,1,0,0,0,1062,1064,1,0,0,0,1063,1059,1,0,0,0,1063,
		1061,1,0,0,0,1064,1065,1,0,0,0,1065,1067,5,112,0,0,1066,1068,3,164,82,
		0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1071,5,112,
		0,0,1070,1072,3,164,82,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,161,
		1,0,0,0,1073,1075,3,50,25,0,1074,1076,3,56,28,0,1075,1074,1,0,0,0,1075,
		1076,1,0,0,0,1076,163,1,0,0,0,1077,1082,3,40,20,0,1078,1079,5,113,0,0,
		1079,1081,3,40,20,0,1080,1078,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,0,
		0,0,1082,1083,1,0,0,0,1083,165,1,0,0,0,1084,1082,1,0,0,0,1085,1086,5,54,
		0,0,1086,1095,5,130,0,0,1087,1095,7,26,0,0,1088,1090,5,61,0,0,1089,1091,
		3,44,22,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1095,1,0,0,0,1092,1093,
		5,54,0,0,1093,1095,3,12,6,0,1094,1085,1,0,0,0,1094,1087,1,0,0,0,1094,1088,
		1,0,0,0,1094,1092,1,0,0,0,1095,1096,1,0,0,0,1096,1097,5,112,0,0,1097,167,
		1,0,0,0,1098,1100,3,170,85,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,
		1101,1,0,0,0,1101,1102,5,0,0,1,1102,169,1,0,0,0,1103,1105,3,172,86,0,1104,
		1103,1,0,0,0,1105,1106,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,
		171,1,0,0,0,1108,1113,3,142,71,0,1109,1113,3,174,87,0,1110,1113,3,48,24,
		0,1111,1113,5,112,0,0,1112,1108,1,0,0,0,1112,1109,1,0,0,0,1112,1110,1,
		0,0,0,1112,1111,1,0,0,0,1113,173,1,0,0,0,1114,1116,3,50,25,0,1115,1114,
		1,0,0,0,1115,1116,1,0,0,0,1116,1117,1,0,0,0,1117,1118,3,94,47,0,1118,1119,
		3,148,74,0,1119,175,1,0,0,0,135,181,189,209,223,228,235,243,247,255,261,
		263,271,277,291,296,305,312,320,328,336,344,352,360,368,376,384,393,401,
		410,417,424,429,436,443,449,467,471,480,487,497,501,504,511,516,520,524,
		529,535,542,548,565,571,576,582,602,607,610,617,632,644,647,649,659,663,
		681,684,688,692,698,701,708,710,715,719,724,729,736,741,743,747,770,777,
		782,786,792,795,804,809,812,818,834,840,843,848,851,858,877,883,886,888,
		897,901,904,909,914,923,931,940,953,961,964,972,975,979,984,997,1001,1008,
		1013,1016,1027,1035,1057,1061,1063,1067,1071,1075,1082,1090,1094,1099,
		1106,1112,1115
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
